from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from db import get_products, add_to_cart, get_cart, remove_from_cart, create_order

user_router = Router()

def user_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data="cart")],
            [InlineKeyboardButton(text="üõçÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏", callback_data="products")]
        ]
    )
    return kb

@user_router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—é! –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=user_menu())

@user_router.callback_query(lambda c: c.data == "products")
async def show_products(callback: types.CallbackQuery):
    products = await get_products()
    if not products:
        await callback.message.edit_text("–ü–æ–∫–∏ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ üòî")
        return

    kb = InlineKeyboardMarkup(row_width=1)
    for p in products:
        kb.add(
            InlineKeyboardButton(
                text=f"{p[1]} - {p[3]}‚Ç¥",
                callback_data=f"product_{p[0]}"
            )
        )
    await callback.message.edit_text("–¢–æ–≤–∞—Ä–∏:", reply_markup=kb)

@user_router.callback_query(lambda c: c.data.startswith("product_"))
async def product_detail(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    products = await get_products()
    product = next((p for p in products if p[0] == product_id), None)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", callback_data=f"add_{product_id}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="products")]
        ]
    )
    await callback.message.edit_text(
        f"{product[1]}\n\n{product[2]}\n\n–¶—ñ–Ω–∞: {product[3]}‚Ç¥",
        reply_markup=kb
    )

@user_router.callback_query(lambda c: c.data.startswith("add_"))
async def add_to_cart_cb(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    await add_to_cart(callback.from_user.id, product_id)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫ ‚úÖ")

@user_router.callback_query(lambda c: c.data == "cart")
async def show_cart(callback: types.CallbackQuery):
    cart = await get_cart(callback.from_user.id)
    if not cart:
        await callback.message.edit_text("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üõí")
        return

    text = "–í–∞—à –∫–æ—à–∏–∫:\n"
    kb = InlineKeyboardMarkup(row_width=1)
    for item in cart:
        text += f"{item['name']} x{item['qty']} - {item['price']}‚Ç¥\n"
        kb.add(InlineKeyboardButton(f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {item['name']}", callback_data=f"remove_{item['product_id']}"))
    kb.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout"))
    await callback.message.edit_text(text, reply_markup=kb)

@user_router.callback_query(lambda c: c.data.startswith("remove_"))
async def remove_from_cart_cb(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    await remove_from_cart(callback.from_user.id, product_id)
    await callback.answer("–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ üóëÔ∏è")
    await show_cart(callback)

@user_router.callback_query(lambda c: c.data == "checkout")
async def checkout(callback: types.CallbackQuery):
    await callback.message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è, —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ –∞–¥—Ä–µ—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–Ü–º'—è, –¢–µ–ª–µ—Ñ–æ–Ω, –ê–¥—Ä–µ—Å–∞")
    await callback.message.delete()