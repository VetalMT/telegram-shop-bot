from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from keyboards import shop_kb, product_inline_kb, cart_inline_kb
from db import get_products, add_to_cart, get_cart, clear_cart, create_order

user_router = Router()

# ====== FSM –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ======
class OrderForm(StatesGroup):
    full_name = State()
    phone = State()
    address = State()

# ====== –î–æ–ø–æ–º—ñ–∂–Ω–µ: –ø–æ–∫–∞–∑ –∫–æ—à–∏–∫–∞ ======
async def send_cart(message: Message):
    items = await get_cart(message.from_user.id)
    if not items:
        return await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.")
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0.0
    for it in items:
        line = f"‚Ä¢ {it['name']} √ó {it['qty']} ‚Äî {it['price']*it['qty']} –≥—Ä–Ω\n"
        text += line
        total += it["price"] * it["qty"]
    text += f"\nüí∞ –í—Å—å–æ–≥–æ: {total} –≥—Ä–Ω"
    await message.answer(text, reply_markup=cart_inline_kb())

# ====== –°—Ç–∞—Ä—Ç ======
@user_router.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—é —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ!", reply_markup=shop_kb)

# ====== –ö–∞—Ç–∞–ª–æ–≥ ======
@user_router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def view_products(message: Message):
    products = await get_products()
    if not products:
        return await message.answer("üì≠ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")

    await message.answer("üì¶ –ù–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:")
    for pid, name, desc, price, photo_id in products:
        caption = f"üÜî {pid}\n{name}\n{desc}\nüí∏ {price} –≥—Ä–Ω"
        if photo_id:
            await message.answer_photo(photo_id, caption=caption, reply_markup=product_inline_kb(pid))
        else:
            await message.answer(caption, reply_markup=product_inline_kb(pid))

# ====== –ö–æ—à–∏–∫ (–∫–Ω–æ–ø–∫–∞) ======
@user_router.message(F.text == "üõí –ö–æ—à–∏–∫")
async def open_cart_btn(message: Message):
    await send_cart(message)

# ====== Callback: –¥–æ–¥–∞—Ç–∏ —É –∫–æ—à–∏–∫ ======
@user_router.callback_query(F.data.startswith("add:"))
async def cb_add_to_cart(callback: CallbackQuery):
    product_id = int(callback.data.split(":")[1])
    await add_to_cart(callback.from_user.id, product_id, 1)
    await callback.answer("‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞")
    await callback.message.edit_reply_markup(reply_markup=product_inline_kb(product_id))

# ====== Callback: –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–æ—à–∏–∫ ======
@user_router.callback_query(F.data == "cart:open")
async def cb_cart_open(callback: CallbackQuery):
    await callback.answer()
    await send_cart(callback.message)

# ====== Callback: –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫ ======
@user_router.callback_query(F.data == "cart:clear")
async def cb_cart_clear(callback: CallbackQuery):
    await clear_cart(callback.from_user.id)
    await callback.answer("üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
    await callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.")

# ====== Callback: –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ø–æ—á–∞—Ç–∏ FSM) ======
@user_router.callback_query(F.data == "order:start")
async def cb_order_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(OrderForm.full_name)
    await callback.message.answer("‚úçÔ∏è –í–∫–∞–∂—ñ—Ç—å –í–∞—à–µ –ü–Ü–ë (–ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º'—è –ü–æ –±–∞—Ç—å–∫–æ–≤—ñ):")

@user_router.message(OrderForm.full_name)
async def ask_phone(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if len(full_name) < 4:
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ü–Ü–ë.")
    await state.update_data(full_name=full_name)
    await state.set_state(OrderForm.phone)
    await message.answer("üìû –í–∫–∞–∂—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@user_router.message(OrderForm.phone)
async def ask_address(message: Message, state: FSMContext):
    phone = message.text.strip()
    if len(phone) < 7:
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω.")
    await state.update_data(phone=phone)
    await state.set_state(OrderForm.address)
    await message.answer("üèôÔ∏è –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ –∞–¥—Ä–µ—Å—É / –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—à—Ç–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:")

@user_router.message(OrderForm.address)
async def finish_order(message: Message, state: FSMContext):
    address = message.text.strip()
    if len(address) < 5:
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∞–¥—Ä–µ—Å—É/–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è.")
    data = await state.get_data()
    full_name = data["full_name"]
    phone = data["phone"]

    order_id = await create_order(message.from_user.id, full_name, phone, address)
    await state.clear()

    if not order_id:
        return await message.answer("‚ùå –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º.")
    await message.answer(
        f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ!\n"
        f"üë§ {full_name}\n"
        f"üìû {phone}\n"
        f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞: {address}\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
        reply_markup=shop_kb
    )
