from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from keyboards import main_kb, product_inline_kb, cart_inline_kb
from db import get_products, add_to_cart, get_cart, remove_from_cart, clear_cart, create_order

# FSM for order
class OrderFSM(StatesGroup):
    full_name = State()
    phone = State()
    city = State()
    address = State()
    confirm = State()

def register_user(dp: Dispatcher):
    @dp.message_handler(commands=["start"])
    async def cmd_start(message: types.Message):
        await message.answer("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–Ω–∏–∑—É ‚¨áÔ∏è", reply_markup=main_kb())

    @dp.message_handler(lambda m: m.text in ["üì¶ –ö–∞—Ç–∞–ª–æ–≥", "üõç –ö–∞—Ç–∞–ª–æ–≥"])
    async def open_catalog_from_reply(message: types.Message):
        products = await get_products()
        if not products:
            await message.answer("üì≠ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        for pid, name, desc, price, photo_id in products:
            caption = f"üì¶ {name}\nüí∞ {price} –≥—Ä–Ω\n\n{desc}"
            if photo_id:
                await message.answer_photo(photo_id, caption=caption, reply_markup=product_inline_kb(pid))
            else:
                await message.answer(caption, reply_markup=product_inline_kb(pid))

    @dp.callback_query_handler(lambda c: c.data and c.data.startswith("add:"))
    async def cb_add_to_cart(callback: types.CallbackQuery):
        await callback.answer("‚úÖ –î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫")
        product_id = int(callback.data.split(":")[1])
        await add_to_cart(callback.from_user.id, product_id, 1)

    @dp.callback_query_handler(lambda c: c.data == "cart:open")
    async def cb_open_cart(callback: types.CallbackQuery):
        await callback.answer()
        await _show_cart(callback.from_user.id, callback.message, callback)

    async def _show_cart(user_id: int, target_message: types.Message | None = None, cq: types.CallbackQuery | None = None):
        items = await get_cart(user_id)
        if not items:
            text = "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π."
            if cq:
                await cq.message.answer(text)
            elif target_message:
                await target_message.answer(text)
            return
        total = sum(i["price"] * i["qty"] for i in items)
        lines = [f"‚Ä¢ {it['name']} √ó {it['qty']} = {it['price']*it['qty']:.2f} –≥—Ä–Ω" for it in items]
        text = "üõç –í–∞—à –∫–æ—à–∏–∫:\n" + "\n".join(lines) + f"\n\n–°—É–º–∞: {total:.2f} –≥—Ä–Ω"
        kb = cart_inline_kb(items)
        if cq:
            await cq.message.answer(text, reply_markup=kb)
        else:
            await target_message.answer(text, reply_markup=kb)

    @dp.callback_query_handler(lambda c: c.data and c.data.startswith("cart:remove:"))
    async def cb_cart_remove(callback: types.CallbackQuery):
        await callback.answer("‚ôªÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ 1 —à—Ç.")
        product_id = int(callback.data.split(":")[2])
        items = await get_cart(callback.from_user.id)
        item = next((i for i in items if i["product_id"] == product_id), None)
        if not item:
            return
        if item["qty"] <= 1:
            await remove_from_cart(callback.from_user.id, product_id)
        else:
            # –ó–º–µ–Ω—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ 1
            await add_to_cart(callback.from_user.id, product_id, -1)
        await _show_cart(callback.from_user.id, cq=callback)

    @dp.callback_query_handler(lambda c: c.data == "cart:clear")
    async def cb_cart_clear(callback: types.CallbackQuery):
        await callback.answer("üßπ –û—á–∏—â–µ–Ω–æ")
        await clear_cart(callback.from_user.id)
        await callback.message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ —Ç–µ–ø–µ—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π.")

    @dp.callback_query_handler(lambda c: c.data == "order:start")
    async def order_start(callback: types.CallbackQuery):
        items = await get_cart(callback.from_user.id)
        if not items:
            await callback.answer()
            await callback.message.answer("üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return
        await OrderFSM.full_name.set()
        await callback.answer()
        await callback.message.answer("üë§ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º‚Äô—è:")

    @dp.message_handler(state=OrderFSM.full_name)
    async def order_full_name(message: types.Message, state: FSMContext):
        await state.update_data(full_name=message.text.strip())
        await OrderFSM.next()
        await message.answer("üìû –í–∫–∞–∂—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ +380XXXXXXXXX):")

    @dp.message_handler(state=OrderFSM.phone)
    async def order_phone(message: types.Message, state: FSMContext):
        phone = message.text.strip()
        if not (phone.startswith("+") and len(phone) >= 10):
            await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∑ + —ñ –∫–æ–¥–æ–º –∫—Ä–∞—ó–Ω–∏.")
            return
        await state.update_data(phone=phone)
        await OrderFSM.next()
        await message.answer("üèô –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ:")

    @dp.message_handler(state=OrderFSM.city)
    async def order_city(message: types.Message, state: FSMContext):
        await state.update_data(city=message.text.strip())
        await OrderFSM.next()
        await message.answer("üè† –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")

    @dp.message_handler(state=OrderFSM.address)
    async def order_address(message: types.Message, state: FSMContext):
        await state.update_data(address=message.text.strip())
        data = await state.get_data()
        confirm_text = (
            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
            f"‚Ä¢ –Ü–º‚Äô—è: {data['full_name']}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"‚Ä¢ –ú—ñ—Å—Ç–æ: {data['city']}\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å–∞: {data['address']}\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å '+' —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–±–æ '-' —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏."
        )
        await OrderFSM.confirm.set()
        await message.answer(confirm_text)

    @dp.message_handler(lambda m: m.text in {"+", "‚àí", "-"}, state=OrderFSM.confirm)
    async def order_confirm(message: types.Message, state: FSMContext):
        if message.text.strip() in {"‚àí", "-"}:
            await state.finish()
            await message.answer("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            return
        data = await state.get_data()
        full_address = f"{data['city']}, {data['address']}"
        order_id = await create_order(
            user_id=message.from_user.id,
            full_name=data["full_name"],
            phone=data["phone"],
            address=full_address
        )
        await state.finish()
        if order_id is None:
            await message.answer("‚ùó –ü–æ–º–∏–ª–∫–∞: –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return
        await message.answer(f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #{order_id}")