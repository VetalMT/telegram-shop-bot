import logging
from aiogram import Router, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from db import get_products, add_to_cart, get_cart

user_router = Router()
logger = logging.getLogger(__name__)

# ==========================
# üõç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
# ==========================
@user_router.message(F.text == "üõí –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    logger.info("üìÇ –í—ñ–¥–∫—Ä–∏–≤–∞—î –∫–∞—Ç–∞–ª–æ–≥ user=%s", message.from_user.id)

    try:
        products = await get_products()
        if not products:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π üò¢")
            return

        for p in products:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —É –∫–æ—à–∏–∫", callback_data=f"add:{p['id']}")]
                ]
            )
            await message.answer_photo(
                photo=p["photo"],
                caption=f"<b>{p['name']}</b>\n{p['description']}\nüíµ {p['price']} –≥—Ä–Ω",
                reply_markup=kb
            )
    except Exception as e:
        logger.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ show_catalog: %s", e, exc_info=True)
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥.")


# ==========================
# üõí –ö–Ω–æ–ø–∫–∞ ¬´–î–æ–¥–∞—Ç–∏ —É –∫–æ—à–∏–∫¬ª
# ==========================
@user_router.callback_query(F.data.startswith("add:"))
async def cb_add_to_cart(callback: types.CallbackQuery):
    logger.info("üëâ –°–ø—Ä–∞—Ü—é–≤–∞–≤ cb_add_to_cart, data=%s", callback.data)
    await callback.answer()  # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–ø—ñ–Ω–µ—Ä

    try:
        product_id = int(callback.data.split(":", 1)[1])
        logger.info("üì¶ –î–æ–¥–∞—é —Ç–æ–≤–∞—Ä #%s —É –∫–æ—à–∏–∫ –¥–ª—è user=%s", product_id, callback.from_user.id)
    except Exception as e:
        logger.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É product_id: %s", callback.data, exc_info=True)
        await callback.message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏.")
        return

    try:
        await add_to_cart(callback.from_user.id, product_id, 1)
        await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ —É –∫–æ—à–∏–∫!")
        logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä %s –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %s", product_id, callback.from_user.id)
    except Exception as e:
        logger.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ add_to_cart: %s", e, exc_info=True)
        await callback.message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫.")


# ==========================
# üõí –ö–Ω–æ–ø–∫–∞ ¬´–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫¬ª
# ==========================
@user_router.callback_query(F.data == "cart:open")
async def cb_open_cart(callback: types.CallbackQuery):
    logger.info("üëâ –°–ø—Ä–∞—Ü—é–≤–∞–≤ cb_open_cart –¥–ª—è user=%s", callback.from_user.id)
    await callback.answer()

    try:
        cart = await get_cart(callback.from_user.id)
        if not cart:
            await callback.message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return

        text = "üõç –í–∞—à –∫–æ—à–∏–∫:\n\n"
        total = 0
        for item in cart:
            text += f"‚ñ´Ô∏è {item['name']} ‚Äî {item['quantity']} —à—Ç. √ó {item['price']} –≥—Ä–Ω\n"
            total += item["quantity"] * item["price"]

        text += f"\nüí∞ –í—Å—å–æ–≥–æ: {total} –≥—Ä–Ω"
        await callback.message.answer(text)
        logger.info("‚úÖ –ö–æ—à–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É %s", callback.from_user.id)
    except Exception as e:
        logger.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ show_cart: %s", e, exc_info=True)
        await callback.message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ—à–∏–∫.")


# ==========================
# üîé Debug: –≤—Å—ñ callback-–∏
# ==========================
@user_router.callback_query()
async def debug_all_callbacks(callback: types.CallbackQuery):
    logger.info("üîé –û—Ç—Ä–∏–º–∞–Ω–æ callback: %s –≤—ñ–¥ user=%s", callback.data, callback.from_user.id)
    await callback.answer()
