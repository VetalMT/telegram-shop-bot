from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

user_router = Router()

# üõí –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –∫–æ—à–∏–∫—ñ–≤ (–¥–µ–º–æ)
user_carts = {}

def add_to_cart(user_id: int, product_id: str):
    user_carts.setdefault(user_id, []).append(product_id)

# --- –°—Ç–∞—Ä—Ç ---
@user_router.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="open_catalog")],
            [InlineKeyboardButton(text="üõí –ö–æ—à–∏–∫", callback_data="open_cart")],
        ]
    )
    await message.answer("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)

# --- –ö–∞—Ç–∞–ª–æ–≥ ---
@user_router.callback_query(F.data == "open_catalog")
async def cb_open_catalog(callback: types.CallbackQuery):
    await callback.answer()

    products = [
        {"id": "1", "name": "–¢–æ–≤–∞—Ä 1", "price": 100},
        {"id": "2", "name": "–¢–æ–≤–∞—Ä 2", "price": 200},
    ]

    for product in products:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", callback_data=f"add_to_cart:{product['id']}")]
            ]
        )
        await callback.message.answer(
            f"üì¶ {product['name']}\nüí∞ –¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω",
            reply_markup=keyboard
        )

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫ ---
@user_router.callback_query(F.data.startswith("add_to_cart:"))
async def cb_add_to_cart(callback: types.CallbackQuery):
    product_id = callback.data.split(":", 1)[1]
    add_to_cart(callback.from_user.id, product_id)
    await callback.answer("‚úÖ –î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫")

# --- –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—à–∏–∫–∞ ---
@user_router.callback_query(F.data == "open_cart")
async def cb_open_cart(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    cart = user_carts.get(user_id, [])

    if not cart:
        await callback.message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    text = "üõç –í–∞—à –∫–æ—à–∏–∫:\n" + "\n".join([f"–¢–æ–≤–∞—Ä {item}" for item in cart])
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç–∏", callback_data="clear_cart")],
            [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout")],
        ]
    )
    await callback.message.answer(text, reply_markup=keyboard)

# --- –û—á–∏—Å—Ç–∫–∞ –∫–æ—à–∏–∫–∞ ---
@user_router.callback_query(F.data == "clear_cart")
async def cb_clear_cart(callback: types.CallbackQuery):
    user_carts[callback.from_user.id] = []
    await callback.answer("üóë –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
    await callback.message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ —Ç–µ–ø–µ—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π.")

# --- –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ---
@user_router.callback_query(F.data == "checkout")
async def cb_checkout(callback: types.CallbackQuery):
    user_carts[callback.from_user.id] = []
    await callback.answer("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ")
    await callback.message.answer("–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! üíô")

# --- –§–æ–ª–±–µ–∫, —â–æ–± –Ω–µ –±—É–ª–æ 'not handled' ---
@user_router.message()
async def fallback(message: types.Message):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
    await cmd_start(message)
