from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from keyboards import shop_kb, product_inline_kb, cart_inline_kb
from db import get_products, add_to_cart, get_cart, remove_from_cart, clear_cart, create_order

user_router = Router(name="user")

# ---------- START —ñ –±–∞–∑–æ–≤—ñ –∫–Ω–æ–ø–∫–∏ ----------
@user_router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–Ω–∏–∑—É ‚¨áÔ∏è",
        reply_markup=shop_kb
    )

# –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –Ω–∏–∂–Ω—è –∫–Ω–æ–ø–∫–∞ "–ö–∞—Ç–∞–ª–æ–≥"
@user_router.message(F.text.in_(["üì¶ –ö–∞—Ç–∞–ª–æ–≥", "üõç –ö–∞—Ç–∞–ª–æ–≥", "üõç –ú–∞–≥–∞–∑–∏–Ω", "üõç –ö–∞—Ç–∞–ª–æ–≥"]))
async def open_catalog_from_reply(message: types.Message):
    await show_catalog(message)

# –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –Ω–∏–∂–Ω—è –∫–Ω–æ–ø–∫–∞ "–ö–æ—Ä–∑–∏–Ω–∞/–ö–æ—à–∏–∫"
@user_router.message(F.text.in_(["üõí –ö–æ—Ä–∑–∏–Ω–∞", "üõí –ö–æ—à–∏–∫"]))
async def open_cart_from_reply(message: types.Message):
    await show_cart(message.chat.id, target_message=message)

# ---------- –ö–∞—Ç–∞–ª–æ–≥ ----------
async def show_catalog(target: types.Message | types.CallbackQuery):
    products = await get_products(limit=50, offset=0)
    if not products:
        text = "üì≠ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        if isinstance(target, types.CallbackQuery):
            await target.message.answer(text)
        else:
            await target.answer(text)
        return

    for pid, name, desc, price, photo_id in products:
        caption = f"üì¶ {name}\nüí∞ {price} –≥—Ä–Ω\n\n{desc}"
        if isinstance(target, types.CallbackQuery):
            if photo_id:
                await target.message.answer_photo(photo_id, caption=caption, reply_markup=product_inline_kb(pid))
            else:
                await target.message.answer(caption, reply_markup=product_inline_kb(pid))
        else:
            if photo_id:
                await target.answer_photo(photo_id, caption=caption, reply_markup=product_inline_kb(pid))
            else:
                await target.answer(caption, reply_markup=product_inline_kb(pid))

# Callback –∑ –∫–∞—Ç–∞–ª–æ–≥—É
@user_router.callback_query(F.data == "open_catalog")
async def cb_open_catalog(callback: types.CallbackQuery):
    await callback.answer()
    await show_catalog(callback)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫
@user_router.callback_query(F.data.startswith("add:"))
async def cb_add_to_cart(callback: types.CallbackQuery):
    await callback.answer("‚úÖ –î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫")
    product_id = int(callback.data.split(":")[1])
    await add_to_cart(callback.from_user.id, product_id, 1)

# ---------- –ö–æ—à–∏–∫ ----------
async def show_cart(user_id: int, target_message: types.Message | None = None, cq: types.CallbackQuery | None = None):
    items = await get_cart(user_id)
    if not items:
        text = "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π."
        if cq:
            await cq.message.answer(text)
        elif target_message:
            await target_message.answer(text)
        return

    total = sum(i["price"] * i["qty"] for i in items)
    lines = []
    for it in items:
        lines.append(f"‚Ä¢ {it['name']} √ó {it['qty']} = {it['price']*it['qty']:.2f} –≥—Ä–Ω")
    text = "üõç –í–∞—à –∫–æ—à–∏–∫:\n" + "\n".join(lines) + f"\n\n–°—É–º–∞: {total:.2f} –≥—Ä–Ω"
    kb = cart_inline_kb(items)

    if cq:
        await cq.message.answer(text, reply_markup=kb)
    else:
        await target_message.answer(text, reply_markup=kb)

@user_router.callback_query(F.data == "cart:open")
async def cb_open_cart(callback: types.CallbackQuery):
    await callback.answer()
    await show_cart(callback.from_user.id, cq=callback)

@user_router.callback_query(F.data.startswith("cart:remove:"))
async def cb_cart_remove(callback: types.CallbackQuery):
    await callback.answer("‚ôªÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ 1 —à—Ç.")
    product_id = int(callback.data.split(":")[2])
    items = await get_cart(callback.from_user.id)
    item = next((i for i in items if i["product_id"] == product_id), None)
    if not item:
        return
    # –∑–º–µ–Ω—à—É—î–º–æ –Ω–∞ 1 –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤–Ω—ñ—Å—Ç—é, —è–∫—â–æ –±—É–ª–æ 1
    if item["qty"] <= 1:
        await remove_from_cart(callback.from_user.id, product_id, qty=item["qty"])
    else:
        await remove_from_cart(callback.from_user.id, product_id, qty=1)
    await show_cart(callback.from_user.id, cq=callback)

@user_router.callback_query(F.data == "cart:clear")
async def cb_cart_clear(callback: types.CallbackQuery):
    await callback.answer("üßπ –û—á–∏—â–µ–Ω–æ")
    await clear_cart(callback.from_user.id)
    await callback.message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ —Ç–µ–ø–µ—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π.")

# ---------- –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (FSM) ----------
class OrderFSM(StatesGroup):
    full_name = State()
    phone = State()
    city = State()
    address = State()
    confirm = State()

@user_router.callback_query(F.data == "order:start")
async def order_start(callback: types.CallbackQuery, state: FSMContext):
    items = await get_cart(callback.from_user.id)
    if not items:
        await callback.answer()
        await callback.message.answer("üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    await state.set_state(OrderFSM.full_name)
    await callback.answer()
    await callback.message.answer("üë§ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º‚Äô—è:")

@user_router.message(OrderFSM.full_name)
async def order_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())
    await state.set_state(OrderFSM.phone)
    await message.answer("üìû –í–∫–∞–∂—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ +380XXXXXXXXX):")

@user_router.message(OrderFSM.phone)
async def order_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not (phone.startswith("+") and len(phone) >= 10):
        await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∫–∞–∂—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∑ + —ñ –∫–æ–¥–æ–º –∫—Ä–∞—ó–Ω–∏.")
        return
    await state.update_data(phone=phone)
    await state.set_state(OrderFSM.city)
    await message.answer("üèô –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ:")

@user_router.message(OrderFSM.city)
async def order_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text.strip())
    await state.set_state(OrderFSM.address)
    await message.answer("üè† –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")

@user_router.message(OrderFSM.address)
async def order_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text.strip())
    data = await state.get_data()
    confirm_text = (
        "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
        f"‚Ä¢ –Ü–º‚Äô—è: {data.get('full_name')}\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"‚Ä¢ –ú—ñ—Å—Ç–æ: {data.get('city')}\n"
        f"‚Ä¢ –ê–¥—Ä–µ—Å–∞: {data.get('address')}\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å '+' —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–±–æ '-' —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏."
    )
    await state.set_state(OrderFSM.confirm)
    await message.answer(confirm_text)

@user_router.message(OrderFSM.confirm, F.text.in_({"+", "-"}))
async def order_confirm(message: types.Message, state: FSMContext):
    if message.text.strip() == "-":
        await state.clear()
        await message.answer("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    data = await state.get_data()
    full_address = f"{data.get('city')}, {data.get('address')}"
    order_id = await create_order(
        user_id=message.from_user.id,
        full_name=data.get("full_name"),
        phone=data.get("phone"),
        address=full_address
    )
    await state.clear()
    if order_id is None:
        await message.answer("‚ùó –ü–æ–º–∏–ª–∫–∞: –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    await message.answer(f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #{order_id}")
