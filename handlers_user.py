from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from keyboards import shop_kb
from db import get_products

user_router = Router()

# —Ç–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∑–∏–Ω–∏ (–≤ –ø–∞–º º—è—Ç—ñ)
# {user_id: [product_id, product_id, ...]}
cart = {}


# --- –°—Ç–∞—Ä—Ç ---
@user_router.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—é —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ!", reply_markup=shop_kb)


# --- –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—ñ–≤ ---
@user_router.message(F.text == "üõç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
async def view_products(message: Message):
    products = get_products()
    if not products:
        return await message.answer("üì≠ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")

    text = "üì¶ –ù–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:\n\n"
    for p in products:
        text += f"üÜî {p[0]} | {p[1]} ‚Äî {p[3]} –≥—Ä–Ω\n"
    text += "\n–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –∫–æ—Ä–∑–∏–Ω—É, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:\n`/add ID` (–¥–µ ID ‚Äî –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É)"
    await message.answer(text, parse_mode="Markdown")


# --- –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –∫–æ—Ä–∑–∏–Ω—É ---
@user_router.message(F.text.startswith("/add"))
async def add_to_cart(message: Message):
    try:
        product_id = int(message.text.split()[1])
    except:
        return await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/add ID`", parse_mode="Markdown")

    user_id = message.from_user.id
    cart.setdefault(user_id, []).append(product_id)
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä –∑ ID {product_id} –¥–æ–¥–∞–Ω–æ —É –∫–æ—Ä–∑–∏–Ω—É.")


# --- –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—Ä–∑–∏–Ω–∏ ---
@user_router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: Message):
    user_id = message.from_user.id
    if user_id not in cart or not cart[user_id]:
        return await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.")

    products = get_products()
    user_cart = cart[user_id]
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0

    for pid in user_cart:
        for p in products:
            if p[0] == pid:
                text += f"üì¶ {p[1]} ‚Äî {p[3]} –≥—Ä–Ω\n"
                total += p[3]

    text += f"\nüí∞ –í—Å—å–æ–≥–æ: {total} –≥—Ä–Ω"
    text += "\n\n–©–æ–± –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É –≤–≤–µ–¥—ñ—Ç—å `/clear`.\n–©–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å `/order`."
    await message.answer(text)


# --- –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω–∏ ---
@user_router.message(F.text == "/clear")
async def clear_cart(message: Message):
    user_id = message.from_user.id
    cart[user_id] = []
    await message.answer("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")


# --- –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ---
@user_router.message(F.text == "/order")
async def make_order(message: Message):
    user_id = message.from_user.id
    if user_id not in cart or not cart[user_id]:
        return await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.")

    products = get_products()
    user_cart = cart[user_id]
    text = "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
    total = 0

    for pid in user_cart:
        for p in products:
            if p[0] == pid:
                text += f"üì¶ {p[1]} ‚Äî {p[3]} –≥—Ä–Ω\n"
                total += p[3]

    text += f"\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total} –≥—Ä–Ω"
    text += "\n\nüîî –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."

    # –æ—á–∏—â–∞—î–º–æ –∫–æ—Ä–∑–∏–Ω—É –ø—ñ—Å–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    cart[user_id] = []

    await message.answer(text)
