# handlers_user.py
from aiogram import Router, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

user_router = Router()

# üõí –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –∫–æ—à–∏–∫—ñ–≤ (–º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ë–î)
user_carts = {}

# üìå –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫
def add_to_cart(user_id: int, product_id: str):
    if user_id not in user_carts:
        user_carts[user_id] = []
    user_carts[user_id].append(product_id)


# üìå –°—Ç–∞—Ä—Ç–æ–≤–µ –º–µ–Ω—é
@user_router.message(commands=["start"])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥", callback_data="open_catalog")],
            [InlineKeyboardButton(text="üõí –ö–æ—à–∏–∫", callback_data="open_cart")],
        ]
    )
    await message.answer("–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=keyboard)


# üìå –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–∞—Ç–∞–ª–æ–≥—É (–ø–æ–∫–∏ —â–æ –¥–µ–º–æ-—Ç–æ–≤–∞—Ä–∏)
@user_router.callback_query(lambda c: c.data == "open_catalog")
async def cb_open_catalog(callback: types.CallbackQuery):
    await callback.answer()  # ‚ö° –º–∏—Ç—Ç—î–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —â–æ–± –Ω–µ –±—É–ª–æ –ø–æ–º–∏–ª–∫–∏

    # –¢–µ—Å—Ç–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ (–º–æ–∂–Ω–∞ –±—Ä–∞—Ç–∏ –∑ –ë–î)
    products = [
        {"id": "1", "name": "–¢–æ–≤–∞—Ä 1", "price": 100},
        {"id": "2", "name": "–¢–æ–≤–∞—Ä 2", "price": 200},
    ]

    for product in products:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõí –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", callback_data=f"add_to_cart:{product['id']}")]
            ]
        )
        await callback.message.answer(
            f"üì¶ {product['name']}\nüí∞ –¶—ñ–Ω–∞: {product['price']} –≥—Ä–Ω",
            reply_markup=keyboard
        )


# üìå –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫
@user_router.callback_query(lambda c: c.data.startswith("add_to_cart:"))
async def cb_add_to_cart(callback: types.CallbackQuery):
    await callback.answer("‚úÖ –î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫")  # ‚ö° –º–∏—Ç—Ç—î–≤–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ

    product_id = callback.data.split(":")[1]
    user_id = callback.from_user.id
    add_to_cart(user_id, product_id)


# üìå –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—à–∏–∫–∞
@user_router.callback_query(lambda c: c.data == "open_cart")
async def cb_open_cart(callback: types.CallbackQuery):
    await callback.answer()  # ‚ö° –º–∏—Ç—Ç—î–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å

    user_id = callback.from_user.id
    cart = user_carts.get(user_id, [])

    if not cart:
        await callback.message.answer("üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        text = "üõç –í–∞—à –∫–æ—à–∏–∫:\n" + "\n".join([f"–¢–æ–≤–∞—Ä {item}" for item in cart])
        await callback.message.answer(text)
