from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command

from keyboards import shop_kb
from db import get_products, get_cart, add_to_cart as db_add_to_cart, clear_cart as db_clear_cart

user_router = Router()

# --- –°—Ç–∞—Ä—Ç ---
@user_router.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—é —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ!", reply_markup=shop_kb)

# --- –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—ñ–≤ ---
@user_router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def view_products(message: Message):
    products = await get_products()
    if not products:
        return await message.answer("üì≠ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")

    text = "üì¶ –ù–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:\n\n"
    for p in products:
        text += f"üÜî {p[0]} | {p[1]} ‚Äî {p[3]} –≥—Ä–Ω\n"
    text += "\n–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –∫–æ—Ä–∑–∏–Ω—É, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:\n`/add ID` (–¥–µ ID ‚Äî –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É)"
    await message.answer(text, parse_mode="Markdown")

# --- –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –∫–æ—Ä–∑–∏–Ω—É ---
@user_router.message(F.text.startswith("/add"))
async def add_to_cart(message: Message):
    try:
        product_id = int(message.text.split()[1])
    except:
        return await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/add ID`", parse_mode="Markdown")

    user_id = message.from_user.id
    await db_add_to_cart(user_id, product_id)
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä –∑ ID {product_id} –¥–æ–¥–∞–Ω–æ —É –∫–æ—Ä–∑–∏–Ω—É.")

# --- –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—Ä–∑–∏–Ω–∏ ---
@user_router.message(F.text == "üõí –ö–æ—à–∏–∫")
async def view_cart(message: Message):
    user_id = message.from_user.id
    items = await get_cart(user_id)
