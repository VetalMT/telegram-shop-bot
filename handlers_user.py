# handlers_user.py
import logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from keyboards import shop_kb, product_inline_kb, cart_inline_kb
from db import (
    get_products,
    add_to_cart,
    get_cart,
    remove_from_cart,
    clear_cart,
    create_order,
)

logger = logging.getLogger(__name__)
user_router = Router(name="user")

# ---------- START —ñ –±–∞–∑–æ–≤—ñ –∫–Ω–æ–ø–∫–∏ ----------
@user_router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑–Ω–∏–∑—É ‚¨áÔ∏è",
        reply_markup=shop_kb
    )

# –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –Ω–∏–∂–Ω—è –∫–Ω–æ–ø–∫–∞ "–ö–∞—Ç–∞–ª–æ–≥" (reply-–∫–Ω–æ–ø–∫–∞)
@user_router.message(F.text.in_(["üì¶ –ö–∞—Ç–∞–ª–æ–≥", "üõç –ö–∞—Ç–∞–ª–æ–≥", "üõç –ú–∞–≥–∞–∑–∏–Ω", "üõç –ö–∞—Ç–∞–ª–æ–≥"]))
async def open_catalog_from_reply(message: types.Message):
    await show_catalog(message)

# –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –Ω–∏–∂–Ω—è –∫–Ω–æ–ø–∫–∞ "–ö–æ—Ä–∑–∏–Ω–∞/–ö–æ—à–∏–∫" (reply-–∫–Ω–æ–ø–∫–∞)
@user_router.message(F.text.in_(["üõí –ö–æ—Ä–∑–∏–Ω–∞", "üõí –ö–æ—à–∏–∫"]))
async def open_cart_from_reply(message: types.Message):
    await show_cart(message.chat.id, target_message=message)


# ---------- –ö–∞—Ç–∞–ª–æ–≥ ----------
async def show_catalog(target: types.Message | types.CallbackQuery):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ —è–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/—Ñ–æ—Ç–æ –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏.
    target –º–æ–∂–µ –±—É—Ç–∏ Message –∞–±–æ CallbackQuery.
    """
    try:
        products = await get_products(limit=50, offset=0)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ get_products(): %s", e)
        text = "‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        if isinstance(target, types.CallbackQuery):
            await target.message.answer(text)
        else:
            await target.answer(text)
        return

    if not products:
        text = "üì≠ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        if isinstance(target, types.CallbackQuery):
            await target.message.answer(text)
        else:
            await target.answer(text)
        return

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ –æ–¥–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
    for pid, name, desc, price, photo_id in products:
        caption = f"üì¶ <b>{name}</b>\nüí∞ <b>{price:.2f} –≥—Ä–Ω</b>\n\n{desc}"
        try:
            if isinstance(target, types.CallbackQuery):
                if photo_id:
                    await target.message.answer_photo(photo_id, caption=caption, reply_markup=product_inline_kb(pid))
                else:
                    await target.message.answer(caption, reply_markup=product_inline_kb(pid))
            else:
                if photo_id:
                    await target.answer_photo(photo_id, caption=caption, reply_markup=product_inline_kb(pid))
                else:
                    await target.answer(caption, reply_markup=product_inline_kb(pid))
        except Exception as e:
            logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä #%s: %s", pid, e)


# Callback –∑ –∫–∞—Ç–∞–ª–æ–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —ñ–Ω—à–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–∞—Ç–∞–ª–æ–≥—É)
@user_router.callback_query(F.data == "open_catalog")
async def cb_open_catalog(callback: types.CallbackQuery):
    await callback.answer()  # –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–ø—ñ–Ω–µ—Ä
    await show_catalog(callback)


# ---------- –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫ ----------
@user_router.callback_query(F.data.startswith("add:"))
async def cb_add_to_cart(callback: types.CallbackQuery):
    """
    –û—á—ñ–∫—É—î–º–æ callback.data —Ñ–æ—Ä–º–∞—Ç—É "add:<product_id>"
    """
    await callback.answer()  # –æ–¥—Ä–∞–∑—É –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–ø—ñ–Ω–µ—Ä —É –∫–ª—ñ—î–Ω—Ç—ñ
    try:
        product_id = int(callback.data.split(":", 1)[1])
    except Exception as e:
        logger.exception("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback.data –¥–ª—è add_to_cart: %s", callback.data)
        await callback.message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–∫–∏.")
        return

    try:
        # –¥–æ–¥–∞—î–º–æ –≤ –∫–æ—à–∏–∫
        await add_to_cart(callback.from_user.id, product_id, 1)
        # –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (toast)
        await callback.answer("‚úÖ –î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫", show_alert=False)
        logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –¥–æ–¥–∞–≤ —Ç–æ–≤–∞—Ä #%s —É –∫–æ—à–∏–∫", callback.from_user.id, product_id)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ add_to_cart user=%s product=%s: %s", callback.from_user.id, product_id, e)
        # –ø–æ–∫–∞–∑—É—î–º–æ alert –∑ –ø–æ–º–∏–ª–∫–æ—é
        try:
            await callback.answer("‚ö†Ô∏è –ù–µ–≤–¥–∞–ª–æ—Å—å –¥–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", show_alert=True)
        except Exception:
            pass


# ---------- –ö–æ—à–∏–∫ ----------
async def show_cart(user_id: int, target_message: types.Message | None = None, cq: types.CallbackQuery | None = None):
    """
    –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –Ø–∫—â–æ cq –ø–µ—Ä–µ–¥–∞–Ω–æ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ç–æ–º—É –∂ —á–∞—Ç—ñ.
    """
    try:
        items = await get_cart(user_id)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ get_cart() –¥–ª—è user %s: %s", user_id, e)
        text = "‚ùó –ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—à–∏–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        if cq:
            await cq.message.answer(text)
        elif target_message:
            await target_message.answer(text)
        return

    if not items:
        text = "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π."
        if cq:
            await cq.message.answer(text)
        elif target_message:
            await target_message.answer(text)
        return

    total = sum(i["price"] * i["qty"] for i in items)
    lines = []
    for it in items:
        lines.append(f"‚Ä¢ {it['name']} √ó {it['qty']} = {it['price']*it['qty']:.2f} –≥—Ä–Ω")
    text = "üõç –í–∞—à –∫–æ—à–∏–∫:\n" + "\n".join(lines) + f"\n\n–°—É–º–∞: {total:.2f} –≥—Ä–Ω"
    kb = cart_inline_kb(items)

    try:
        if cq:
            await cq.message.answer(text, reply_markup=kb)
        else:
            await target_message.answer(text, reply_markup=kb)
    except Exception as e:
        logger.exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ—à–∏–∫ user=%s: %s", user_id, e)


@user_router.callback_query(F.data == "cart:open")
async def cb_open_cart(callback: types.CallbackQuery):
    # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–ø—ñ–Ω–µ—Ä
    await callback.answer()
    await show_cart(callback.from_user.id, cq=callback)


@user_router.callback_query(F.data.startswith("cart:remove:"))
async def cb_cart_remove(callback: types.CallbackQuery):
    """
    callback.data = "cart:remove:<product_id>"
    –ó–º–µ–Ω—à—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ 1 –∞–±–æ –≤–∏–¥–∞–ª—è—î, –ø–æ—Ç—ñ–º –æ–Ω–æ–≤–ª—é—î –∫–æ—à–∏–∫.
    """
    await callback.answer()  # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ "–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"
    try:
        product_id = int(callback.data.split(":", 2)[2])
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É product_id –≤ cart:remove: %s", callback.data)
        await callback.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ –∫–Ω–æ–ø–∫–∏", show_alert=True)
        return

    try:
        # –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏ qty (get_cart)
        items = await get_cart(callback.from_user.id)
        item = next((i for i in items if i["product_id"] == product_id), None)
        if not item:
            # –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
            await callback.answer("üü° –¢–æ–≤–∞—Ä –≤–∂–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –∫–æ—à–∏–∫—É", show_alert=False)
            await show_cart(callback.from_user.id, cq=callback)
            return

        # –∑–º–µ–Ω—à—É—î–º–æ –Ω–∞ 1 (remove_from_cart –º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä qty)
        if item["qty"] <= 1:
            await remove_from_cart(callback.from_user.id, product_id, qty=item["qty"])
        else:
            await remove_from_cart(callback.from_user.id, product_id, qty=1)

        await callback.answer("‚ôªÔ∏è –û–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—à–∏–∫", show_alert=False)
        await show_cart(callback.from_user.id, cq=callback)
        logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –≤–∏–¥–∞–ª–∏–≤/–∑–º–µ–Ω—à–∏–≤ —Ç–æ–≤–∞—Ä %s —É –∫–æ—à–∏–∫—É", callback.from_user.id, product_id)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑ –∫–æ—à–∏–∫–∞ user=%s product=%s: %s", callback.from_user.id, product_id, e)
        try:
            await callback.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞", show_alert=True)
        except Exception:
            pass


@user_router.callback_query(F.data == "cart:clear")
async def cb_cart_clear(callback: types.CallbackQuery):
    await callback.answer()  # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å–ø—ñ–Ω–µ—Ä
    try:
        await clear_cart(callback.from_user.id)
        await callback.message.answer("üßπ –í–∞—à –∫–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")
        logger.info("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á %s –æ—á–∏—Å—Ç–∏–≤ –∫–æ—à–∏–∫", callback.from_user.id)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ clear_cart user=%s: %s", callback.from_user.id, e)
        try:
            await callback.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", show_alert=True)
        except Exception:
            pass


# ---------- –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (FSM) ----------
class OrderFSM(StatesGroup):
    full_name = State()
    phone = State()
    city = State()
    address = State()
    confirm = State()

@user_router.callback_query(F.data == "order:start")
async def order_start(callback: types.CallbackQuery, state: FSMContext):
    # –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–ø—ñ–Ω–µ—Ä
    await callback.answer()
    items = await get_cart(callback.from_user.id)
    if not items:
        await callback.message.answer("üõí –ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    await state.set_state(OrderFSM.full_name)
    await callback.message.answer("üë§ –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º‚Äô—è:")

@user_router.message(OrderFSM.full_name)
async def order_full_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())
    await state.set_state(OrderFSM.phone)
    await message.answer("üìû –í–∫–∞–∂—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ +380XXXXXXXXX):")

@user_router.message(OrderFSM.phone)
async def order_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not (phone.startswith("+") and len(phone) >= 10):
        await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∑ –∫–æ–¥–æ–º –∫—Ä–∞—ó–Ω–∏, –Ω–∞–ø—Ä. +380XXXXXXXXX")
        return
    await state.update_data(phone=phone)
    await state.set_state(OrderFSM.city)
    await message.answer("üèô –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ:")

@user_router.message(OrderFSM.city)
async def order_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text.strip())
    await state.set_state(OrderFSM.address)
    await message.answer("üè† –í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")

@user_router.message(OrderFSM.address)
async def order_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text.strip())
    data = await state.get_data()
    confirm_text = (
        "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
        f"‚Ä¢ –Ü–º‚Äô—è: {data.get('full_name')}\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"‚Ä¢ –ú—ñ—Å—Ç–æ: {data.get('city')}\n"
        f"‚Ä¢ –ê–¥—Ä–µ—Å–∞: {data.get('address')}\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å '+' —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–±–æ '-' —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏."
    )
    await state.set_state(OrderFSM.confirm)
    await message.answer(confirm_text)

@user_router.message(OrderFSM.confirm, F.text.in_({"+", "‚àí", "-"}))
async def order_confirm(message: types.Message, state: FSMContext):
    if message.text.strip() in {"‚àí", "-"}:
        await state.clear()
        await message.answer("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    data = await state.get_data()
    full_address = f"{data.get('city')}, {data.get('address')}"
    try:
        order_id = await create_order(
            user_id=message.from_user.id,
            full_name=data.get("full_name"),
            phone=data.get("phone"),
            address=full_address
        )
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ create_order user=%s: %s", message.from_user.id, e)
        await message.answer("‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await state.clear()
        return

    await state.clear()
    if order_id is None:
        await message.answer("‚ùó –ü–æ–º–∏–ª–∫–∞: –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    await message.answer(f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: #{order_id}")
