from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from db import get_products, add_to_cart, get_cart, create_order

user_router = Router()

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
def user_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üõí –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", callback_data="view_cart"),
        InlineKeyboardButton("üõç –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏", callback_data="view_products")
    )
    return kb

# --- –°—Ç–∞—Ä—Ç ---
@user_router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—é! –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=user_menu())

# --- –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—ñ–≤ ---
@user_router.callback_query(F.data=="view_products")
async def view_products(callback: types.CallbackQuery):
    products = await get_products()
    for p in products:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫", callback_data=f"add_{p[0]}")]
        ])
        text = f"{p[1]}\n{p[2]}\n–¶—ñ–Ω–∞: {p[3]}"
        await callback.message.answer_photo(p[4], caption=text, reply_markup=kb)
    await callback.answer()

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫ ---
@user_router.callback_query(F.data.startswith("add_"))
async def add_to_cart_cb(callback: types.CallbackQuery):
    pid = int(callback.data.split("_")[1])
    await add_to_cart(callback.from_user.id, pid)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫ ‚úÖ")

# --- –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—à–∏–∫–∞ ---
@user_router.callback_query(F.data=="view_cart")
async def view_cart(callback: types.CallbackQuery):
    items = await get_cart(callback.from_user.id)
    if not items:
        await callback.message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üõí")
        return
    text = ""
    for i in items:
        text += f"{i['name']} x{i['qty']} = {i['price']*i['qty']}\n"
    await callback.message.answer(f"–í–∞—à –∫–æ—à–∏–∫:\n{text}\n–©–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞–ø–∏—à—ñ—Ç—å /order")
    await callback.answer()

# --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ---
@user_router.message(Command("order"))
async def create_order_cmd(message: types.Message):
    # –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥: —Ñ—ñ–∫—Ç–∏–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
    order_id = await create_order(message.from_user.id, "–Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ", "0999999999", "–ê–¥—Ä–µ—Å–∞")
    if order_id:
        await message.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚úÖ")
    else:
        await message.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")