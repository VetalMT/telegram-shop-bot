from aiogram import Router, types
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db import add_product, delete_product, get_products
from config import ADMINS

admin_router = Router()

# ---------- FSM –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É ----------
class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    photo = State()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ admin
def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

# –°—Ç–∞—Ä—Ç –∞–¥–º—ñ–Ω –º–µ–Ω—é
@admin_router.message(Command("admin"))
async def admin_start(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("üö´ –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω")
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç", "–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç")
    await message.answer("üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb)

# –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç
@admin_router.message(Text("–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç"))
async def admin_add_product(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—Ä–æ–¥—É–∫—Ç—É:")
    await state.set_state(AddProduct.name)

@admin_router.message(AddProduct.name)
async def admin_add_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å –ø—Ä–æ–¥—É–∫—Ç—É:")
    await state.set_state(AddProduct.description)

@admin_router.message(AddProduct.description)
async def admin_add_product_desc(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏ —Ü—ñ–Ω—É –ø—Ä–æ–¥—É–∫—Ç—É:")
    await state.set_state(AddProduct.price)

@admin_router.message(AddProduct.price)
async def admin_add_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ü—ñ–Ω—É (—á–∏—Å–ª–æ).")
        return
    await state.update_data(price=price)
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—É –∞–±–æ /skip")
    await state.set_state(AddProduct.photo)

@admin_router.message(AddProduct.photo, content_types=types.ContentType.PHOTO)
async def admin_add_product_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    await add_product(
        name=data["name"],
        description=data["description"],
        price=data["price"],
        photo_id=photo_id
    )
    await message.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–¥–∞–Ω–æ!")
    await state.clear()

@admin_router.message(AddProduct.photo, commands="skip")
async def admin_add_product_skip_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await add_product(
        name=data["name"],
        description=data["description"],
        price=data["price"],
        photo_id=None
    )
    await message.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–¥–∞–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ!")
    await state.clear()

# –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç
@admin_router.message(Text("–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç"))
async def admin_delete_product(message: types.Message):
    products = await get_products()
    if not products:
        await message.answer("–ü—Ä–æ–¥—É–∫—Ç—ñ–≤ –Ω–µ–º–∞—î.")
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for p in products:
        kb.add(types.KeyboardButton(f"{p[1]} | ID:{p[0]}"))
    kb.add("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏")
    await message.answer("–í–∏–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb)

@admin_router.message()
async def admin_delete_product_select(message: types.Message):
    if message.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏":
        await message.answer("‚ùå –í—ñ–¥–º—ñ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
        return
    if "ID:" not in message.text:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
        return
    try:
        product_id = int(message.text.split("ID:")[-1])
    except ValueError:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID")
        return
    from db import delete_product
    deleted = await delete_product(product_id)
    if deleted:
        await message.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏", reply_markup=types.ReplyKeyboardRemove())