from aiogram import Router, F
from aiogram.types import Message
from keyboards import admin_kb
from db import add_product, get_products, delete_product
from config import ADMIN_ID

admin_router = Router()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–¥–º—ñ–Ω
async def is_admin(message: Message):
    return message.from_user.id == ADMIN_ID

# –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä
@admin_router.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def add_item(message: Message):
    if not await is_admin(message):
        await message.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω")
        return
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    # –î–∞–ª—ñ –º–æ–∂–Ω–∞ —Ä–æ–±–∏—Ç–∏ FSM –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏, —Ü—ñ–Ω–∏, –æ–ø–∏—Å—É

# –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä
@admin_router.message(F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
async def remove_item(message: Message):
    if not await is_admin(message):
        await message.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω")
        return
    products = get_products()
    if not products:
        await message.answer("üì¶ –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î")
        return
    text = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:\n"
    for p in products:
        text += f"{p[0]}. {p[1]} - {p[2]} –≥—Ä–Ω\n"
    await message.answer(text + "\n–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")

# –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏
@admin_router.message(F.text == "üì¶ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
async def view_items(message: Message):
    if not await is_admin(message):
        await message.answer("‚ùå –í–∏ –Ω–µ –∞–¥–º—ñ–Ω")
        return
    products = get_products()
    if not products:
        await message.answer("üì¶ –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î")
        return
    text = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:\n"
    for p in products:
        text += f"{p[0]}. {p[1]} - {p[2]} –≥—Ä–Ω\n"
    await message.answer(text)
