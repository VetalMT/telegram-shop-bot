from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode

from db import add_product, get_products, delete_product, count_products
from config import ADMIN_ID
from keyboards import admin_kb

# FSM
class AddProductFSM(StatesGroup):
    name = State()
    description = State()
    price = State()
    photo = State()

def register_admin(dp: Dispatcher):
    @dp.message_handler(commands=["admin"])
    async def cmd_admin(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        await message.answer("‚öôÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=admin_kb())

    @dp.message_handler(Text(equals="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"))
    async def admin_add_product_start(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            return
        await AddProductFSM.name.set()
        await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")

    @dp.message_handler(state=AddProductFSM.name)
    async def admin_add_product_name(message: types.Message, state: FSMContext):
        await state.update_data(name=message.text.strip())
        await AddProductFSM.next()
        await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")

    @dp.message_handler(state=AddProductFSM.description)
    async def admin_add_product_description(message: types.Message, state: FSMContext):
        await state.update_data(description=message.text.strip())
        await AddProductFSM.next()
        await message.answer("üíµ –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 199.99):")

    @dp.message_handler(state=AddProductFSM.price)
    async def admin_add_product_price(message: types.Message, state: FSMContext):
        text = message.text.replace(",", ".").strip()
        try:
            price = float(text)
        except ValueError:
            await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 199.99")
            return
        await state.update_data(price=price)
        await AddProductFSM.next()
        await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /skip —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.")

    @dp.message_handler(commands=["skip"], state=AddProductFSM.photo)
    async def admin_add_product_skip_photo(message: types.Message, state: FSMContext):
        await state.update_data(photo_id=None)
        data = await state.get_data()
        pid = await add_product(data["name"], data["description"], data["price"], data.get("photo_id"))
        await state.finish()
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ! (ID: {pid})", reply_markup=admin_kb())

    @dp.message_handler(content_types=types.ContentType.PHOTO, state=AddProductFSM.photo)
    async def admin_add_product_photo(message: types.Message, state: FSMContext):
        photo_id = message.photo[-1].file_id
        await state.update_data(photo_id=photo_id)
        data = await state.get_data()
        pid = await add_product(data["name"], data["description"], data["price"], data.get("photo_id"))
        await state.finish()
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ! (ID: {pid})", reply_markup=admin_kb())

    @dp.message_handler(Text(equals="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏"))
    async def admin_view_products(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            return
        products = await get_products(limit=50, offset=0)
        if not products:
            await message.answer("üì≠ –£ –∫–∞—Ç–∞–ª–æ–∑—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
            return
        lines = []
        for pid, name, desc, price, photo_id in products:
            lines.append(f"#{pid} ‚Äî {name} | {price} –≥—Ä–Ω")
        await message.answer("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:\n" + "\n".join(lines))

    @dp.message_handler(Text(equals="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä"))
    async def admin_delete_prompt(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            return
        total = await count_products()
        await message.answer(
            f"–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è. –£—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {total}\n–ü—Ä–∏–∫–ª–∞–¥: 12"
        )

    @dp.message_handler(lambda m: m.text.isdigit())
    async def admin_delete_by_id(message: types.Message):
        if message.from_user.id != ADMIN_ID:
            return
        pid = int(message.text)
        ok = await delete_product(pid)
        if ok:
            await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{pid} –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=admin_kb())
        else:
            await message.answer(f"‚ùó –¢–æ–≤–∞—Ä #{pid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=admin_kb())