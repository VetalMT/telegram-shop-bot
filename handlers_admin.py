from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from config import ADMIN_ID
from keyboards import admin_kb, delete_product_kb
from db import add_product, get_products, delete_product, count_products

admin_router = Router()

class AddProductFSM(StatesGroup):
    name = State()
    description = State()
    price = State()
    photo = State()

@admin_router.message(Command("admin"))
async def admin_panel(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        return await msg.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await msg.answer("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb)

# ---- –î–û–î–ê–¢–ò –¢–û–í–ê–† ----
@admin_router.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def add_start(msg: Message, state: FSMContext):
    if msg.from_user.id != ADMIN_ID:
        return
    await state.set_state(AddProductFSM.name)
    await msg.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")

@admin_router.message(AddProductFSM.name)
async def add_name(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text.strip())
    await state.set_state(AddProductFSM.description)
    await msg.answer("–û–ø–∏—à—ñ—Ç—å —Ç–æ–≤–∞—Ä:")

@admin_router.message(AddProductFSM.description)
async def add_desc(msg: Message, state: FSMContext):
    await state.update_data(description=msg.text.strip())
    await state.set_state(AddProductFSM.price)
    await msg.answer("–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É (—á–∏—Å–ª–æ):")

@admin_router.message(AddProductFSM.price)
async def add_price(msg: Message, state: FSMContext):
    try:
        price = float(msg.text.replace(",", "."))
    except Exception:
        return await msg.answer("‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 199.99")
    await state.update_data(price=price)
    await state.set_state(AddProductFSM.photo)
    await msg.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é /skip).")

@admin_router.message(Command("skip"), AddProductFSM.photo)
async def skip_photo(msg: Message, state: FSMContext):
    data = await state.get_data()
    product_id = await add_product(
        data["name"], data["description"], data["price"], photo_id=None
    )
    await state.clear()
    await msg.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{product_id} –¥–æ–¥–∞–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ.")

@admin_router.message(AddProductFSM.photo, F.photo)
async def add_photo(msg: Message, state: FSMContext):
    data = await state.get_data()
    photo_id = msg.photo[-1].file_id
    product_id = await add_product(
        data["name"], data["description"], data["price"], photo_id=photo_id
    )
    await state.clear()
    await msg.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{product_id} –¥–æ–¥–∞–Ω–æ.")

# ---- –ü–ï–†–ï–ì–õ–Ø–î/–í–ò–î–ê–õ–ï–ù–ù–Ø ----
@admin_router.message(F.text == "üì¶ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
async def admin_view_products(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        return
    items = await get_products(limit=20, offset=0)
    if not items:
        return await msg.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    for pid, name, description, price, photo_id in items:
        text = f"#{pid} ‚Ä¢ <b>{name}</b>\n{description}\n–¶—ñ–Ω–∞: {price:.2f} ‚Ç¥"
        if photo_id:
            await msg.bot.send_photo(msg.chat.id, photo=photo_id, caption=text, parse_mode="HTML",
                                     reply_markup=delete_product_kb(pid))
        else:
            await msg.answer(text, parse_mode="HTML", reply_markup=delete_product_kb(pid))

@admin_router.message(F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
async def delete_hint(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        return
    await msg.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´üóë –í–∏–¥–∞–ª–∏—Ç–∏¬ª –ø—ñ–¥ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º —Ç–æ–≤–∞—Ä–æ–º —É —Å–ø–∏—Å–∫—É ¬´üì¶ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏¬ª.")

@admin_router.callback_query(F.data.startswith("adm_del:"))
async def admin_delete_cb(cb: CallbackQuery):
    if cb.from_user.id != ADMIN_ID:
        return await cb.answer("–ù–µ–º–∞ –¥–æ—Å—Ç—É–ø—É", show_alert=True)
    pid = int(cb.data.split(":")[1])
    ok = await delete_product(pid)
    if ok:
        await cb.message.edit_text("üóë –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await cb.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
