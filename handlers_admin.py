from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import ADMIN_ID
from keyboards import admin_kb
from db import add_product, get_products, delete_product
from states import AddProduct

admin_router = Router()


# --- –í—Ö—ñ–¥ –≤ –∞–¥–º—ñ–Ω–∫—É ---
@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    if str(message.from_user.id) != str(ADMIN_ID):
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")
    await message.answer("‚öôÔ∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin_kb)


# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
@admin_router.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def add_product_start(message: Message, state: FSMContext):
    await state.set_state(AddProduct.name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")


@admin_router.message(AddProduct.name)
async def add_product_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddProduct.description)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")


@admin_router.message(AddProduct.description)
async def add_product_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddProduct.price)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (—á–∏—Å–ª–æ):")


@admin_router.message(AddProduct.price)
async def add_product_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
    except ValueError:
        return await message.answer("‚ùå –¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")

    await state.update_data(price=price)
    await state.set_state(AddProduct.photo)
    await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É:")


@admin_router.message(AddProduct.photo, F.photo)
async def add_product_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photo_id = message.photo[-1].file_id

    # –∑–∞–ø–∏—Å —É –±–∞–∑—É
    add_product(
        name=data["name"],
        description=data["description"],
        price=data["price"],
        photo=photo_id
    )

    await state.clear()
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π!", reply_markup=admin_kb)


# --- –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—ñ–≤ ---
@admin_router.message(F.text == "üì¶ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
async def view_products(message: Message):
    products = get_products()
    if not products:
        return await message.answer("üì≠ –£ –±–∞–∑—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")

    for p in products:
        await message.answer_photo(
            photo=p[4],
            caption=f"üÜî {p[0]}\nüì¶ {p[1]}\nüí¨ {p[2]}\nüí≤ {p[3]}"
        )


# --- –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ---
@admin_router.message(F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
async def delete_product_start(message: Message):
    products = get_products()
    if not products:
        return await message.answer("üì≠ –£ –±–∞–∑—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")

    text = "–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:\n\n"
    for p in products:
        text += f"üÜî {p[0]} | {p[1]} ‚Äî {p[3]} –≥—Ä–Ω\n"
    await message.answer(text)


@admin_router.message()
async def delete_product_by_id(message: Message):
    if message.text.isdigit():
        product_id = int(message.text)
        delete_product(product_id)
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä –∑ ID {product_id} –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=admin_kb)
