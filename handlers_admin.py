from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from config import ADMIN_ID
from keyboards import admin_kb
from db import add_product, get_products, delete_product, count_products

admin_router = Router(name="admin")

# ---------- FSM –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É ----------
class AddProductFSM(StatesGroup):
    name = State()
    description = State()
    price = State()
    photo = State()
    confirm = State()

# /admin –º–µ–Ω—é
@admin_router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    await message.answer("‚öôÔ∏è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=admin_kb)

# –°—Ç–∞—Ä—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
@admin_router.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def admin_add_product_start(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await state.set_state(AddProductFSM.name)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")

@admin_router.message(AddProductFSM.name)
async def admin_add_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await state.set_state(AddProductFSM.description)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")

@admin_router.message(AddProductFSM.description)
async def admin_add_product_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await state.set_state(AddProductFSM.price)
    await message.answer("üíµ –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 199.99):")

@admin_router.message(AddProductFSM.price)
async def admin_add_product_price(message: types.Message, state: FSMContext):
    text = message.text.replace(",", ".").strip()
    try:
        price = float(text)
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. 199.99")
        return
    await state.update_data(price=price)
    await state.set_state(AddProductFSM.photo)
    await message.answer("üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /skip —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.")

@admin_router.message(Command("skip"), AddProductFSM.photo)
async def admin_add_product_skip_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=None)
    await _confirm_product(message, state)

@admin_router.message(AddProductFSM.photo, F.photo)
async def admin_add_product_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    await _confirm_product(message, state)

async def _confirm_product(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = (
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Ç–æ–≤–∞—Ä:\n"
        f"‚Ä¢ –ù–∞–∑–≤–∞: {data.get('name')}\n"
        f"‚Ä¢ –û–ø–∏—Å: {data.get('description')}\n"
        f"‚Ä¢ –¶—ñ–Ω–∞: {data.get('price')}\n"
        f"‚Ä¢ –§–æ—Ç–æ: {'—î' if data.get('photo_id') else '–Ω–µ–º–∞—î'}\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å '+' —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–±–æ '-' —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏."
    )
    await state.set_state(AddProductFSM.confirm)
    await message.answer(text)

@admin_router.message(AddProductFSM.confirm, F.text.in_({"+", "-"}))
async def admin_add_product_confirm(message: types.Message, state: FSMContext):
    txt = message.text.strip()
    if txt == "-":
        await state.clear()
        await message.answer("‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=admin_kb)
        return
    data = await state.get_data()
    await add_product(
        name=data["name"],
        description=data["description"],
        price=float(data["price"]),
        photo_id=data.get("photo_id"),
    )
    await state.clear()
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ!", reply_markup=admin_kb)

# –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–æ–≤–∞—Ä—ñ–≤ (—Å–ø–∏—Å–∫–æ–º –∑ ID)
@admin_router.message(F.text == "üì¶ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
async def admin_view_products(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    products = await get_products(limit=50, offset=0)
    if not products:
        await message.answer("üì≠ –£ –∫–∞—Ç–∞–ª–æ–∑—ñ –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
        return
    lines = []
    for pid, name, desc, price, photo_id in products:
        lines.append(f"#{pid} ‚Äî {name} | {price} –≥—Ä–Ω")
    await message.answer("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:\n" + "\n".join(lines))

# –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É - –∑–∞–ø–∏—Ç ID
@admin_router.message(F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
async def admin_delete_prompt(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    total = await count_products()
    await message.answer(
        f"–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è. –£—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤: {total}\n–ü—Ä–∏–∫–ª–∞–¥: 12"
    )

@admin_router.message(F.text.regexp(r"^\d+$"))
async def admin_delete_by_id(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    pid = int(message.text)
    ok = await delete_product(pid)
    if ok:
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{pid} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer(f"‚ùó –¢–æ–≤–∞—Ä #{pid} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
