import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from fastapi import FastAPI, Request
from aiogram.fsm.storage.memory import MemoryStorage

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)

# --- –¢–æ–∫–µ–Ω ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –£ .env –Ω–µ–º–∞—î BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- FSM ---
class OrderForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()

# --- FastAPI ---
app = FastAPI()

@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = bot.session.json_loads(data)
    await dp.feed_webhook_update(bot, update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    webhook_url = os.getenv("RENDER_EXTERNAL_URL") + "/webhook"
    await bot.set_webhook(webhook_url)
    logging.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
def main_menu_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data="categories")
    kb.button(text="‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å", callback_data="about")
    kb.adjust(1)
    return kb.as_markup()

def categories_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏", callback_data="cat_phones")
    kb.button(text="üíª –ù–æ—É—Ç–±—É–∫–∏", callback_data="cat_laptops")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
    kb.adjust(1)
    return kb.as_markup()

def products_kb(category: str):
    kb = InlineKeyboardBuilder()
    if category == "phones":
        kb.button(text="iPhone 15", callback_data="prod_iphone15")
        kb.button(text="Samsung S24", callback_data="prod_s24")
    elif category == "laptops":
        kb.button(text="MacBook Pro", callback_data="prod_macbook")
        kb.button(text="Asus ROG", callback_data="prod_asus")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="categories")
    kb.adjust(1)
    return kb.as_markup()

def confirm_order_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="confirm_order")
    kb.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_order")
    kb.adjust(1)
    return kb.as_markup()

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("üëã –í—ñ—Ç–∞—é —É –º–∞–≥–∞–∑–∏–Ω—ñ! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu_kb())

@dp.callback_query(F.data == "back_main")
async def back_main(callback: CallbackQuery):
    await callback.message.edit_text("üîù –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

@dp.callback_query(F.data == "categories")
async def show_categories(callback: CallbackQuery):
    await callback.message.edit_text("üìÇ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=categories_kb())

@dp.callback_query(F.data == "about")
async def about(callback: CallbackQuery):
    await callback.message.edit_text("‚ÑπÔ∏è –ú–∏ –ø—Ä–æ–¥–∞—î–º–æ —Ç–µ—Ö–Ω—ñ–∫—É –∑–∞ –Ω–∞–π–∫—Ä–∞—â–∏–º–∏ —Ü—ñ–Ω–∞–º–∏!", reply_markup=main_menu_kb())

# --- –¢–æ–≤–∞—Ä–∏ ---
@dp.callback_query(F.data == "cat_phones")
async def phones(callback: CallbackQuery):
    await callback.message.edit_text("üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏:", reply_markup=products_kb("phones"))

@dp.callback_query(F.data == "cat_laptops")
async def laptops(callback: CallbackQuery):
    await callback.message.edit_text("üíª –ù–æ—É—Ç–±—É–∫–∏:", reply_markup=products_kb("laptops"))

@dp.callback_query(F.data.startswith("prod_"))
async def select_product(callback: CallbackQuery, state: FSMContext):
    product_map = {
        "prod_iphone15": "iPhone 15",
        "prod_s24": "Samsung S24",
        "prod_macbook": "MacBook Pro",
        "prod_asus": "Asus ROG",
    }
    product = product_map.get(callback.data, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä")
    await state.update_data(product=product)
    await callback.message.edit_text(
        f"üõç –í–∏ –æ–±—Ä–∞–ª–∏: <b>{product}</b>\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:",
        parse_mode="HTML"
    )
    await state.set_state(OrderForm.waiting_for_name)

# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ ---
@dp.message(StateFilter(OrderForm.waiting_for_name))
async def save_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìç –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderForm.waiting_for_address)

# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏ ---
@dp.message(StateFilter(OrderForm.waiting_for_address))
async def save_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data()

    text = (
        f"üìù –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
        f"–¢–æ–≤–∞—Ä: <b>{data['product']}</b>\n"
        f"–Ü–º'—è: <b>{data['name']}</b>\n"
        f"–ê–¥—Ä–µ—Å–∞: <b>{data['address']}</b>\n\n"
        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏?"
    )
    await message.answer(text, reply_markup=confirm_order_kb(), parse_mode="HTML")

# --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ---
@dp.callback_query(F.data == "confirm_order")
async def confirm(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—è üì¶")
    await state.clear()

@dp.callback_query(F.data == "cancel_order")
async def cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu_kb())
    await state.clear()
