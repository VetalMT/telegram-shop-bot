import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from aiogram.types.webhook import Webhook
from aiogram.dispatcher.webhook.aiohttp_server import SimpleRequestHandler
import pdfkit  # –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF

# ---------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ----------
logging.basicConfig(level=logging.INFO)

# ---------- –ö–æ–Ω—Ñ—ñ–≥ ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://your-app.onrender.com/webhook
PORT = int(os.getenv("PORT", 10000))

# ---------- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ----------
bot = Bot(
    token=BOT_TOKEN,
    session=AiohttpSession(),
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# ---------- FSM ----------
class OrderStates(StatesGroup):
    choosing_product = State()
    entering_name = State()
    entering_address = State()
    confirm_order = State()

# ---------- –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥–∏ ----------
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="buy")]
    ])
    await message.answer("–í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=kb)

# ---------- –ö–Ω–æ–ø–∫–∏ ----------
@dp.callback_query(F.data == "buy")
async def buy_callback(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏:")
    await state.set_state(OrderStates.choosing_product)

@dp.message(OrderStates.choosing_product)
async def choose_product(message: Message, state: FSMContext):
    await state.update_data(product=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è:")
    await state.set_state(OrderStates.entering_name)

@dp.message(OrderStates.entering_name)
async def enter_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.entering_address)

@dp.message(OrderStates.entering_address)
async def enter_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data()
    await message.answer(
        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
        f"–¢–æ–≤–∞—Ä: {data['product']}\n"
        f"–Ü–º'—è: {data['name']}\n"
        f"–ê–¥—Ä–µ—Å–∞: {data['address']}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")],
            [InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel")]
        ])
    )
    await state.set_state(OrderStates.confirm_order)

@dp.callback_query(F.data == "confirm", state=OrderStates.confirm_order)
async def confirm_order(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    pdf_filename = f"{data['name']}_order.pdf"

    # ---------- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF ----------
    html_content = f"""
    <h1>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</h1>
    <p><b>–¢–æ–≤–∞—Ä:</b> {data['product']}</p>
    <p><b>–Ü–º'—è:</b> {data['name']}</p>
    <p><b>–ê–¥—Ä–µ—Å–∞:</b> {data['address']}</p>
    """
    pdfkit.from_string(html_content, pdf_filename)

    await call.message.answer_document(open(pdf_filename, "rb"), caption="–í–∞—à PDF-–∫–≤–∏—Ç–æ–∫")
    await call.message.answer("–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!")
    await state.clear()

@dp.callback_query(F.data == "cancel", state=OrderStates.confirm_order)
async def cancel_order(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.clear()

# ---------- FastAPI –¥–ª—è Webhook ----------
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()

@app.post("/webhook")
async def webhook_handler(request: Request):
    data = await request.json()
    update = Webhook(**data)
    await dp.feed_update(update)
    return JSONResponse(content={"ok": True})

# ---------- –û—Å–Ω–æ–≤–Ω–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ----------
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=PORT)
