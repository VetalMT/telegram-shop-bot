import os
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio

# ==========================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# ==========================
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ –≤–∫–∞–∑–∞–Ω–æ BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

app = FastAPI()


# ==========================
# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ (FSM)
# ==========================
class OrderState(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_product = State()


# ==========================
# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
# ==========================
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä"))
main_kb.add(KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å"))


# ==========================
# –û–±—Ä–æ–±–Ω–∏–∫–∏
# ==========================
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—î–º–æ —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_kb)


@dp.message_handler(lambda m: m.text == "üõí –ó–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
async def order_product(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º‚Äô—è:")
    await OrderState.waiting_for_name.set()


@dp.message_handler(state=OrderState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await OrderState.waiting_for_phone.set()


@dp.message_handler(state=OrderState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–Ø–∫–∏–π —Ç–æ–≤–∞—Ä –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏?")
    await OrderState.waiting_for_product.set()


@dp.message_handler(state=OrderState.waiting_for_product)
async def process_product(message: types.Message, state: FSMContext):
    await state.update_data(product=message.text)
    data = await state.get_data()

    summary = (
        f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ!\n\n"
        f"üë§ –Ü–º‚Äô—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {data['product']}"
    )

    await message.answer(summary, reply_markup=main_kb)
    await state.finish()


@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å")
async def about(message: types.Message):
    await message.answer("–ú–∏ ‚Äî —Ç–µ—Å—Ç–æ–≤–∏–π –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω üöÄ")


# ==========================
# FastAPI –º–∞—Ä—à—Ä—É—Ç–∏
# ==========================
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    print(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π.")


@app.post("/webhook/{token}")
async def webhook_handler(token: str, request: Request):
    if token != BOT_TOKEN:
        return {"error": "Invalid token"}

    update = await request.json()
    telegram_update = types.Update.to_object(update)
    await dp.process_update(telegram_update)
    return {"status": "ok"}


@app.get("/")
async def root():
    return {"status": "Bot is running"}


# ==========================
# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–µ –¥–ª—è Render)
# ==========================
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
