import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.bot import DefaultBotProperties
from fastapi import FastAPI, Request

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: https://shop-x54i.onrender.com

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

app = FastAPI()

# –ü—Ä–æ—Å—Ç–∏–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤
PRODUCTS = {
    "apple": {"name": "üçé –Ø–±–ª—É–∫–æ", "price": 5},
    "banana": {"name": "üçå –ë–∞–Ω–∞–Ω", "price": 3},
}

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–ª—ñ—î–Ω—Ç–∞
def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥", callback_data="show_catalog"),
        InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart")
    )
    return kb

# –ú–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥—É
def catalog_menu():
    kb = InlineKeyboardMarkup(row_width=1)
    for key, prod in PRODUCTS.items():
        kb.add(InlineKeyboardButton(f"{prod['name']} - {prod['price']} –≥—Ä–Ω", callback_data=f"buy_{key}"))
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main"))
    return kb

# –ü—Ä–æ—Å—Ç–∏–π –∫–æ—à–∏–∫ (—Ç–∏–º—á–∞—Å–æ–≤–∏–π, –Ω–∞ —Å–µ—Å—ñ—é)
CART = {}

# –°—Ç–∞—Ä—Ç
@dp.message()
async def start(message: types.Message):
    CART[message.from_user.id] = []
    await message.answer("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def handle_buttons(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data

    if data == "show_catalog":
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –∑ –∫–∞—Ç–∞–ª–æ–≥—É:", reply_markup=catalog_menu())
    elif data == "show_cart":
        cart_items = CART.get(user_id, [])
        if not cart_items:
            text = "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üõí"
        else:
            text = "–í–∞—à –∫–æ—à–∏–∫:\n" + "\n".join(cart_items)
        await callback.message.answer(text, reply_markup=main_menu())
    elif data.startswith("buy_"):
        key = data[4:]
        product = PRODUCTS.get(key)
        if product:
            CART.setdefault(user_id, []).append(f"{product['name']} - {product['price']} –≥—Ä–Ω")
            await callback.message.answer(f"‚úÖ {product['name']} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!")
    elif data == "back_main":
        await callback.message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())

    await callback.answer()

# Webhook endpoint
@app.post(f"/webhook/{BOT_TOKEN}")
async def webhook(request: Request):
    body = await request.json()
    update = types.Update(**body)
    await dp.process_update(update)
    return {"ok": True}

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Webhook –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ
@app.on_event("startup")
async def on_startup():
    await bot.delete_webhook()
    webhook_url = f"{WEBHOOK_URL}/webhook/{BOT_TOKEN}"
    await bot.set_webhook(webhook_url)
    logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {webhook_url}")

# –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞
@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
