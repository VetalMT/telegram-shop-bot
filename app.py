import os
import logging
from aiohttp import web
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

# -----------------------
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
# -----------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É .env")

# -----------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
# -----------------------
logging.basicConfig(level=logging.INFO)

# -----------------------
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
# -----------------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# -----------------------
# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)
# -----------------------
main_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏"),
         types.KeyboardButton(text="üíª –ù–æ—É—Ç–±—É–∫–∏")],
        [types.KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")]
    ],
    resize_keyboard=True
)

# -----------------------
# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ (–±–µ–∑ –ë–î)
# -----------------------
CART = {}

# -----------------------
# –•–µ–Ω–¥–ª–µ—Ä–∏
# -----------------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç üëã –¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –º–∞–≥–∞–∑–∏–Ω!\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∏–∂—á–µ:",
        reply_markup=main_kb
    )

# –í–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
@dp.message(F.text == "üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏")
async def show_phones(message: types.Message):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="iPhone 14 - 1000$", callback_data="add_iphone")],
        [types.InlineKeyboardButton(text="Samsung S23 - 900$", callback_data="add_samsung")]
    ])
    await message.answer("üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏:", reply_markup=kb)

@dp.message(F.text == "üíª –ù–æ—É—Ç–±—É–∫–∏")
async def show_laptops(message: types.Message):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="MacBook Air - 1500$", callback_data="add_macbook")],
        [types.InlineKeyboardButton(text="Dell XPS - 1300$", callback_data="add_dell")]
    ])
    await message.answer("üíª –ù–æ—É—Ç–±—É–∫–∏:", reply_markup=kb)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    product_map = {
        "add_iphone": "iPhone 14 - 1000$",
        "add_samsung": "Samsung S23 - 900$",
        "add_macbook": "MacBook Air - 1500$",
        "add_dell": "Dell XPS - 1300$"
    }
    product = product_map.get(callback.data, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä")

    if user_id not in CART:
        CART[user_id] = []
    CART[user_id].append(product)

    await callback.answer("‚úÖ –î–æ–¥–∞–Ω–æ —É –∫–æ—Ä–∑–∏–Ω—É")
    await callback.message.edit_reply_markup(reply_markup=None)

# –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—Ä–∑–∏–Ω–∏
@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    if user_id not in CART or not CART[user_id]:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è üõí")
    else:
        items = "\n".join(CART[user_id])
        await message.answer(f"üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n{items}")

# -----------------------
# WEBHOOK
# -----------------------
WEBHOOK_PATH = "/webhook"
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")  # Render –¥–∞—î URL
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None

async def on_startup(app):
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logging.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
    else:
        logging.warning("‚ö†Ô∏è WEBHOOK_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

async def on_shutdown(app):
    logging.info("‚ôªÔ∏è –ë–æ—Ç –≤–∏–º–∏–∫–∞—î—Ç—å—Å—è..")
    await bot.delete_webhook()
    await bot.session.close()

# -----------------------
# AIOHTTP APP
# -----------------------
def create_app():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

# -----------------------
# –ó–∞–ø—É—Å–∫
# -----------------------
if __name__ == "__main__":
    web.run_app(create_app(), host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
