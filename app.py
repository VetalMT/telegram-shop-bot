import logging
import os
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiohttp import web

# –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ
from handlers_admin import admin_router
from handlers_user import user_router
from db import init_db

logging.basicConfig(level=logging.INFO)

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ BOT_TOKEN –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")

# üõ°Ô∏è ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
if not ADMIN_ID:
    raise ValueError("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ ADMIN_ID –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")

# üåç Webhook URL (Render –≤–∏—Å—Ç–∞–≤–ª—è—î RENDER_EXTERNAL_URL)
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
if not RENDER_EXTERNAL_URL:
    raise ValueError("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ RENDER_EXTERNAL_URL –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")

WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}/webhook"

# ================== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ ==================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ================== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ==================
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")]
    ],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")]
    ],
    resize_keyboard=True
)

# ================== –†–æ—É—Ç–µ—Ä–∏ ==================
dp.include_router(admin_router)
dp.include_router(user_router)

# ================== –ê–¥–º—ñ–Ω / —Å—Ç–∞—Ä—Ç ==================
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=admin_kb)
    else:
        await message.answer("–í—ñ—Ç–∞—é —É –º–∞–≥–∞–∑–∏–Ω—ñ!", reply_markup=main_kb)

# ================== Webhook ==================
async def handle_webhook(request: web.Request):
    update = await request.json()
    await dp.feed_webhook_update(bot, update)
    return web.Response()

async def on_startup(app: web.Application):
    # 1) –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ë–î
    await init_db()
    # 2) –ü—Ä–æ–ø–∏—Å–∞—Ç–∏ –≤–µ–±—Ö—É–∫
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    logging.info("‚ö†Ô∏è –ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
    await bot.session.close()

# ================== –ó–∞–ø—É—Å–∫ ==================
def main():
    app = web.Application()
    app.router.add_post("/webhook", handle_webhook)

    # –æ–ø—Ü—ñ–π–Ω–æ –ø—Ä–æ—Å—Ç–∏–π healthcheck –Ω–∞ /
    async def health(request: web.Request):
        return web.Response(text="OK")
    app.router.add_get("/", health)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

if __name__ == "__main__":
    main()
