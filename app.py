import logging
import os
import asyncio

from aiogram import Bot, Dispatcher
from aiohttp import web

# –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ
from handlers_admin import admin_router
from handlers_user import user_router
from db import init_db   # ‚úÖ —Ç–µ–ø–µ—Ä –±–µ—Ä–µ–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –±–∞–∑–∏

logging.basicConfig(level=logging.INFO)

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä—ñ–≤
dp.include_router(admin_router)
dp.include_router(user_router)

# ==================
# Webhook settings
# ==================
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")  # Render URL
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

async def on_startup(app):
    # ‚úÖ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await init_db()

    # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.session.close()

# aiohttp —Å–µ—Ä–≤–µ—Ä
async def handle(request):
    update = await request.json()
    await dp.feed_webhook_update(bot, update)
    return web.Response()

def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    web.run_app(app, port=int(os.getenv("PORT", 8080)))

if __name__ == "__main__":
    main()