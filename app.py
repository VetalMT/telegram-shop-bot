import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook
from db import init_db, add_product, delete_product, get_all_products

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ—ñ–≥
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # —Ç–≤—ñ–π Telegram ID
APP_URL = os.getenv("APP_URL")  # Render URL
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{APP_URL}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω"))

admin_menu = ReplyKeyboardMarkup(resize_keyboard=True)
admin_menu.add("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
admin_menu.add("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
admin_menu.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! üëë", reply_markup=admin_menu)
    else:
        await message.answer("–í—ñ—Ç–∞—é! –¶–µ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω üõí", reply_markup=main_menu)

# --- –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å ---
@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
async def view_products(message: types.Message):
    products = get_all_products()
    if not products:
        await message.answer("–ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É.")
        return
    text = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:\n\n"
    for p in products:
        text += f"üÜî {p[0]} | {p[1]} - {p[2]} –≥—Ä–Ω\n"
    await message.answer(text)

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def add_product_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    dp.register_message_handler(process_product_name, state="*")

async def process_product_name(message: types.Message):
    dp.product_name = message.text
    await message.answer("–í–≤–µ–¥–∏ —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (—á–∏—Å–ª–æ–º):")
    dp.register_message_handler(process_product_price, state="*")

async def process_product_price(message: types.Message):
    try:
        price = float(message.text)
        add_product(dp.product_name, price)
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{dp.product_name}' –¥–æ–¥–∞–Ω–æ –∑–∞ {price} –≥—Ä–Ω", reply_markup=admin_menu)
    except ValueError:
        await message.answer("‚ùå –¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
async def delete_product_start(message: types.Message):
    products = get_all_products()
    if not products:
        await message.answer("–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    kb = InlineKeyboardMarkup()
    for p in products:
        kb.add(InlineKeyboardButton(f"{p[1]} ({p[2]} –≥—Ä–Ω)", callback_data=f"del_{p[0]}"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("del_"))
async def process_delete(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    delete_product(product_id)
    await callback.message.edit_text(f"‚úÖ –¢–æ–≤–∞—Ä ID {product_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")

# --- –ú–∞–≥–∞–∑–∏–Ω (–∑–≤–∏—á–∞–π–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ) ---
@dp.message_handler(lambda m: m.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def shop_menu(message: types.Message):
    products = get_all_products()
    if not products:
        await message.answer("–ú–∞–≥–∞–∑–∏–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π üò¢")
        return
    kb = InlineKeyboardMarkup()
    for p in products:
        kb.add(InlineKeyboardButton(f"{p[1]} - {p[2]} –≥—Ä–Ω", callback_data=f"buy_{p[0]}"))
    await message.answer("üõí –¢–æ–≤–∞—Ä–∏:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("buy_"))
async def process_buy(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    products = get_all_products()
    product = next((p for p in products if p[0] == product_id), None)
    if product:
        await callback.message.answer(f"‚úÖ –í–∏ –∫—É–ø–∏–ª–∏ {product[1]} –∑–∞ {product[2]} –≥—Ä–Ω")
    else:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# --- Webhook ---
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    init_db()

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
