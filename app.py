from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
import logging
import os

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)

# --- –î–∞–Ω—ñ –±–æ—Ç–∞ ---
TOKEN = os.getenv("BOT_TOKEN")  # –∞–±–æ –≤—Å—Ç–∞–≤ –ø—Ä—è–º–æ —Ç–æ–∫–µ–Ω
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = f"https://shop-x54i.onrender.com{WEBHOOK_PATH}"

bot = Bot(token=TOKEN)
dp = Dispatcher()

app = FastAPI()

# --- –ö–Ω–æ–ø–∫–∏ ---
def main_menu_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé´ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–≤–∏—Ç–æ–∫", callback_data="next_ticket")],
    ])
    return keyboard

# --- /start ---
@dp.message(Command(commands=["start"]))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π üöÄ", reply_markup=main_menu_keyboard())

# --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ---
@dp.callback_query(lambda c: c.data == "next_ticket")
async def next_ticket_handler(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–°—Ç–≤–æ—Ä—é—é –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–≤–∏—Ç–æ–∫...")
    # --- –¢—É—Ç –≤—Å—Ç–∞–≤–ª—è–π —Å–≤—ñ–π –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó PDF ---
    await callback_query.answer()  # –∑–∞–∫—Ä–∏–≤–∞—î–º–æ "loading" –Ω–∞ –∫–Ω–æ–ø—Ü—ñ

# --- Webhook endpoint ---
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)  # –ü–µ—Ä–µ–¥–∞—î–º–æ bot —ñ update
    return {"ok": True}

# --- FastAPI —Å—Ç–∞—Ä—Ç ---
@app.on_event("startup")
async def on_startup():
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook –Ω–∞ Telegram
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set to {WEBHOOK_URL}")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()
