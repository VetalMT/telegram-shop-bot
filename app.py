import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from fastapi import FastAPI, Request
import uvicorn
import os

# -------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------
TOKEN = os.getenv("BOT_TOKEN")  # üîë —Ç–≤—ñ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∏
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # üîó —Ç–≤—ñ–π –¥–æ–º–µ–Ω + /webhook

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# -------------------
# –î–∞–Ω—ñ –º–∞–≥–∞–∑–∏–Ω—É
# -------------------
PRODUCTS = {
    "üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏": ["iPhone 15", "Samsung S23", "Xiaomi 13"],
    "üíª –ù–æ—É—Ç–±—É–∫–∏": ["MacBook Pro", "Dell XPS", "Lenovo ThinkPad"]
}
CART = {}  # {user_id: [items]}

# -------------------
# –ê–¥–º—ñ–Ω
# -------------------
ADMIN_IDS = [123456789]  # üëâ –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

# -------------------
# –•–µ–Ω–¥–ª–µ—Ä–∏
# -------------------
@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏"), types.KeyboardButton(text="üíª –ù–æ—É—Ç–±—É–∫–∏")],
            [types.KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ñ—Ç–∞—é —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ! –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)

@dp.message(F.text.in_(PRODUCTS.keys()))
async def show_products(message: Message):
    category = message.text
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=p)] for p in PRODUCTS[category]] + [[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä —ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}:", reply_markup=kb)

@dp.message(F.text.in_(sum(PRODUCTS.values(), [])))
async def add_to_cart(message: Message):
    user_id = message.from_user.id
    CART.setdefault(user_id, []).append(message.text)
    await message.answer(f"‚úÖ {message.text} –¥–æ–¥–∞–Ω–æ —É –∫–æ—Ä–∑–∏–Ω—É!")

@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    user_id = message.from_user.id
    items = CART.get(user_id, [])
    if not items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è üõçÔ∏è")
        return
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n- " + "\n- ".join(items)
    await message.answer(text)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: Message):
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏"), types.KeyboardButton(text="üíª –ù–æ—É—Ç–±—É–∫–∏")],
            [types.KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("‚¨ÖÔ∏è –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=kb)

# -------------------
# –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å
# -------------------
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")
        return

    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è")],
            [types.KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")],
            [types.KeyboardButton(text="‚¨ÖÔ∏è –í–∏–π—Ç–∏")]
        ],
        resize_keyboard=True
    )
    await message.answer("üîê –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@dp.message(F.text == "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def show_orders(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    if not CART:
        await message.answer("–ü–æ–∫–∏ —â–æ –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î üì≠")
        return

    text = "üì¶ –£—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
    for uid, items in CART.items():
        text += f"üë§ {uid}:\n - " + "\n - ".join(items) + "\n\n"

    await message.answer(text)

@dp.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def add_product_admin(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ö–∞—Ç–µ–≥–æ—Ä—ñ—è | –ù–∞–∑–≤–∞")
    await state.set_state("add_product")

@dp.message(F.text, state="add_product")
async def save_new_product(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        category, product = message.text.split("|")
        category, product = category.strip(), product.strip()
        if category not in PRODUCTS:
            PRODUCTS[category] = []
        PRODUCTS[category].append(product)
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{product}' –¥–æ–¥–∞–Ω–æ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '{category}'!")
    except:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: –ö–∞—Ç–µ–≥–æ—Ä—ñ—è | –ù–∞–∑–≤–∞")
    await state.clear()

@dp.message(F.text == "‚¨ÖÔ∏è –í–∏–π—Ç–∏")
async def exit_admin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await start_handler(message, None)

# -------------------
# Webhook
# -------------------
@app.post("/webhook")
async def webhook(request: Request):
    update = await request.json()
    await dp.feed_webhook_update(bot, update)
    return {"status": "ok"}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()

if __name__ == "__main__":
    uvicorn.run("app:app", host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
