import logging
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from config import TOKEN, WEBHOOK_URL, WEBAPP_HOST, WEBAPP_PORT

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# ==================
# üìå Handlers
# ==================

@dp.message(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç üëã! –¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É. –ü—Ä–∞—Ü—é—é ‚úÖ")

@dp.message(commands=["help"])
async def help_cmd(message: types.Message):
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/start - –ø–æ—á–∞—Ç–æ–∫\n/help - –¥–æ–ø–æ–º–æ–≥–∞")

@dp.message()
async def echo_handler(message: types.Message):
    await message.answer(f"–¢–∏ –Ω–∞–ø–∏—Å–∞–≤: {message.text}")

# ==================
# üìå Webhook –∑–∞–ø—É—Å–∫
# ==================

async def on_startup(app: web.Application):
    logger.info("üöÄ on_startup: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î...")
    # —Å—é–¥–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ init_db()
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    logger.info("üõë –í–∏–º–∏–∫–∞—é—Å—å...")
    await bot.delete_webhook()
    await bot.session.close()

def main():
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ webhook dispatcher
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=f"/webhook/{TOKEN}")
    setup_application(app, dp, bot=bot)

    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)

if __name__ == "__main__":
    main()
