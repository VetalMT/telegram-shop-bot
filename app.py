import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import BOT_TOKEN
from db import Database

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db = Database()

# ------------------- START -------------------
@dp.message(commands=["start"])
async def start(message: types.Message):
    await db.add_user(message.from_user.id, message.from_user.first_name)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("–ö–æ—à–∏–∫"))
    if message.from_user.id == 123456789:  # üëà —Å—é–¥–∏ –≤—Å—Ç–∞–≤ —Å–≤—ñ–π ID –¥–ª—è –∞–¥–º—ñ–Ω–∞
        kb.add(KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä"), KeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä"))
        kb.add(KeyboardButton("üì¶ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏"))
    await message.answer("–í—ñ—Ç–∞—é —É –º–∞–≥–∞–∑–∏–Ω—ñ!", reply_markup=kb)

# ------------------- ADMIN -------------------
@dp.message(lambda msg: msg.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def add_product(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    # (–¢—É—Ç —Ç—Ä–µ–±–∞ FSM —â–æ–± –ø–æ —á–µ—Ä–∑—ñ –ø–∏—Ç–∞—Ç–∏ –Ω–∞–∑–≤—É, –æ–ø–∏—Å, —Ü—ñ–Ω—É, —Ñ–æ—Ç–æ üëâ –º–æ–∂—É –¥–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º–æ)

@dp.message(lambda msg: msg.text == "üì¶ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
async def view_products(message: types.Message):
    products = await db.get_products()
    if not products:
        await message.answer("–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
        return
    text = "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:\n\n"
    for p in products:
        text += f"ID: {p['id']}\n–ù–∞–∑–≤–∞: {p['name']}\n–¶—ñ–Ω–∞: {p['price']} –≥—Ä–Ω\n\n"
    await message.answer(text)

@dp.message(lambda msg: msg.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
async def delete_product(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")

# ------------------- BUYER -------------------
@dp.message(lambda msg: msg.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def catalog(message: types.Message):
    products = await db.get_products()
    if not products:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç–∏–π.")
        return
    for p in products:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —É –∫–æ—à–∏–∫", callback_data=f"add_{p['id']}"))
        await message.answer_photo(p["photo"], caption=f"{p['name']}\n{p['description']}\nüí∞ {p['price']} –≥—Ä–Ω", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    await db.add_to_cart(callback.from_user.id, product_id)
    await callback.answer("–î–æ–¥–∞–Ω–æ —É –∫–æ—à–∏–∫ ‚úÖ")

@dp.message(lambda msg: msg.text == "–ö–æ—à–∏–∫")
async def view_cart(message: types.Message):
    cart = await db.get_cart(message.from_user.id)
    if not cart:
        await message.answer("–ö–æ—à–∏–∫ –ø—É—Å—Ç–∏–π.")
        return
    text = "üõí –í–∞—à –∫–æ—à–∏–∫:\n\n"
    kb = types.InlineKeyboardMarkup()
    for item in cart:
        text += f"{item['name']} - {item['price']} –≥—Ä–Ω\n"
        kb.add(types.InlineKeyboardButton(f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {item['name']}", callback_data=f"del_{item['id']}"))
    kb.add(types.InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout"))
    await message.answer(text, reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("del_"))
async def remove_from_cart(callback: types.CallbackQuery):
    cart_id = int(callback.data.split("_")[1])
    await db.remove_from_cart(cart_id)
    await callback.answer("–í–∏–¥–∞–ª–µ–Ω–æ ‚úÖ")

# ------------------- MAIN -------------------
async def main():
    await db.connect()
    await db.create_tables()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
