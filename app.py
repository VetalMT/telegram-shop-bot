import os
import logging
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from db import init_db, add_product, delete_product, get_products

logging.basicConfig(level=logging.INFO)

# --- Environment Variables ---
TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 10000))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: https://—Ç–≤—ñ–π-–¥–æ–º–µ–Ω.onrender.com/webhook/<BOT_TOKEN>

# --- –ë–æ—Ç —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ---
bot = Bot(token=TOKEN)
dp = Dispatcher()
dp.workflow_data = {}

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="üì¶ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")]
    ],
    resize_keyboard=True
)

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–í—ñ—Ç–∞—é —É –º–∞–≥–∞–∑–∏–Ω—ñ! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_kb)

# --- –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä ---
@dp.message(lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä")
async def ask_name(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")
    dp.workflow_data[message.from_user.id] = {"state": "add_name"}

@dp.message(lambda m: dp.workflow_data.get(m.from_user.id, {}).get("state") == "add_name")
async def ask_desc(message: types.Message):
    dp.workflow_data[message.from_user.id]["name"] = message.text
    dp.workflow_data[message.from_user.id]["state"] = "add_desc"
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:")

@dp.message(lambda m: dp.workflow_data.get(m.from_user.id, {}).get("state") == "add_desc")
async def ask_price(message: types.Message):
    dp.workflow_data[message.from_user.id]["description"] = message.text
    dp.workflow_data[message.from_user.id]["state"] = "add_price"
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É:")

@dp.message(lambda m: dp.workflow_data.get(m.from_user.id, {}).get("state") == "add_price")
async def save_product(message: types.Message):
    try:
        price = float(message.text)
        data = dp.workflow_data[message.from_user.id]
        await add_product(data["name"], data["description"], price)
        await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ!", reply_markup=main_kb)
        dp.workflow_data.pop(message.from_user.id, None)
    except ValueError:
        await message.answer("‚ùå –¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

# --- –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä ---
@dp.message(lambda m: m.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä")
async def choose_delete(message: types.Message):
    products = await get_products()
    if not products:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=f"{p['id']}. {p['name']}")] for p in products],
        resize_keyboard=True
    )
    dp.workflow_data[message.from_user.id] = {"state": "delete"}
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb)

@dp.message(lambda m: dp.workflow_data.get(m.from_user.id, {}).get("state") == "delete")
async def do_delete(message: types.Message):
    try:
        product_id = int(message.text.split(".")[0])
        await delete_product(product_id)
        await message.answer("‚úÖ –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=main_kb)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=main_kb)
    dp.workflow_data.pop(message.from_user.id, None)

# --- –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏ ---
@dp.message(lambda m: m.text == "üì¶ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏")
async def view_products(message: types.Message):
    products = await get_products()
    if not products:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
        return
    text = "\n\n".join([f"üìå {p['id']}. {p['name']}\nüìù {p['description']}\nüí∞ {p['price']} –≥—Ä–Ω" for p in products])
    await message.answer(text)

# --- –í—Å–µ —ñ–Ω—à–µ ---
@dp.message()
async def unknown(message: types.Message):
    await message.answer("‚ùì –ù–µ –∑—Ä–æ–∑—É–º—ñ–≤... –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –º–µ–Ω—é.", reply_markup=main_kb)

# --- Webhook handler ---
async def handle(request):
    update = types.Update(**await request.json())
    await dp.update_queue.put(update)
    return web.Response()

# --- –ó–∞–ø—É—Å–∫ ---
async def on_startup():
    await init_db()
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫ –Ω–∞ Telegram
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set: {WEBHOOK_URL}")

if __name__ == "__main__":
    app = web.Application()
    app.router.add_post(f"/webhook/{TOKEN}", handle)

    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup())
    web.run_app(app, port=PORT)
