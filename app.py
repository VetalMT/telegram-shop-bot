import logging
import os
import asyncio

from aiogram import Bot, Dispatcher
from aiohttp import web

# –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ
from handlers_admin import admin_router
from handlers_user import user_router
from db import init_db

logging.basicConfig(level=logging.INFO)

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å BOT_TOKEN —É Render Environment Variables")

# —Å—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ø—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
dp.include_router(admin_router)
dp.include_router(user_router)


async def on_startup():
    logging.info("üöÄ –°—Ç–∞—Ä—Ç—É—î–º–æ –±–æ—Ç")
    init_db()  # —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –Ω–µ–º–∞—î


# aiohttp webhook —Å–µ—Ä–≤–µ—Ä
async def handle(request):
    update = await request.json()
    await dp.feed_webhook_update(bot, update)
    return web.Response()


async def start():
    await on_startup()

    app = web.Application()
    app.router.add_post(f"/webhook/{BOT_TOKEN}", handle)

    # –æ—Ç—Ä–∏–º—É—î–º–æ RENDER –∑–æ–≤–Ω—ñ—à–Ω—ñ–π URL
    render_url = os.getenv("RENDER_EXTERNAL_URL")
    if not render_url:
        raise ValueError("‚ùå –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å RENDER_EXTERNAL_URL —É Render Environment Variables")

    # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    await bot.set_webhook(f"{render_url}/webhook/{BOT_TOKEN}")

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()

    logging.info("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ")
    while True:
        await asyncio.sleep(3600)


if __name__ == "__main__":
    asyncio.run(start())