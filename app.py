import os
import logging
import sqlite3
from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties

logging.basicConfig(level=logging.INFO)

# ==============================
# üîë –¢–£–¢ –ë–£–î–ï –¢–í–Ü–ô –¢–û–ö–ï–ù
# ==============================
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")

# ==============================
# üåê Webhook
# ==============================
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ==============================
# üóÑÔ∏è –ë–ê–ó–ê (–º–∞–≥–∞–∑–∏–Ω)
# ==============================
def init_db():
    conn = sqlite3.connect("shop.db")
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            category_id INTEGER,
            name TEXT NOT NULL,
            price REAL NOT NULL,
            FOREIGN KEY(category_id) REFERENCES categories(id)
        )
    """)
    conn.commit()
    conn.close()

def get_categories():
    conn = sqlite3.connect("shop.db")
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM categories")
    rows = cur.fetchall()
    conn.close()
    return rows

def get_products(category_id):
    conn = sqlite3.connect("shop.db")
    cur = conn.cursor()
    cur.execute("SELECT name, price FROM products WHERE category_id=?", (category_id,))
    rows = cur.fetchall()
    conn.close()
    return rows

# ==============================
# üõí –•–ï–ù–î–õ–ï–†–ò
# ==============================
@dp.message(F.text == "/start")
async def start_cmd(message: Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üõç –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó"))
    await message.answer("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –º–∞–≥–∞–∑–∏–Ω! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=kb)

@dp.message(F.text == "üõç –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó")
async def show_categories(message: Message):
    cats = get_categories()
    if not cats:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä—ñ–π –Ω–µ–º–∞—î ‚ùå")
        return
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for cid, name in cats:
        kb.add(KeyboardButton(f"üì¶ {cid}:{name}"))
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)

@dp.message(F.text.startswith("üì¶"))
async def show_products(message: Message):
    try:
        cid = int(message.text.split(":")[0].replace("üì¶ ", ""))
        products = get_products(cid)
        if not products:
            await message.answer("–¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î ‚ùå")
            return
        text = "üõí <b>–¢–æ–≤–∞—Ä–∏:</b>\n\n"
        for name, price in products:
            text += f"‚Ä¢ {name} ‚Äî {price:.2f} –≥—Ä–Ω\n"
        await message.answer(text)
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# ==============================
# üöÄ AIOHTTP Web App
# ==============================
async def on_startup(app: web.Application):
    init_db()
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ Webhook set: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    await bot.delete_webhook()
    logging.info("üõë Webhook deleted")

def setup_app() -> web.Application:
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    dp.workflow_data["AIOHTTP_APP"] = app
    app.router.add_post(WEBHOOK_PATH, dp._webhook_view(bot))  # –¥–ª—è aiogram 3.7+
    return app

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8080))
    web.run_app(setup_app(), host="0.0.0.0", port=port)