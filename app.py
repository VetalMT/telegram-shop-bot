import logging
import os

from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.types import Update, BotCommand
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# –Ω–∞—à—ñ –º–æ–¥—É–ª—ñ
from handlers_user import user_router
from handlers_admin import admin_router
from db import init_db
import config

# -------------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------------------
BOT_TOKEN = config.BOT_TOKEN
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —É environment variables!")

WEBHOOK_HOST = config.WEBHOOK_HOST
if not WEBHOOK_HOST:
    raise RuntimeError("WEBHOOK_HOST (–∞–±–æ RENDER_EXTERNAL_URL) –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —É environment variables!")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST.rstrip('/')}{WEBHOOK_PATH}"

# -------------------------------
# Aiogram
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏ (–∞–¥–º—ñ–Ω–∫–∞ —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ)
dp.include_router(user_router)
dp.include_router(admin_router)

# -------------------------------
async def on_startup(app: web.Application):
    logger.info("üöÄ on_startup: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î...")
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –ø–æ—á–Ω—É—Ç—å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å —É –ë–î
    await init_db()
    logger.info("üåç –í—Å—Ç–∞–Ω–æ–≤–ª—é—é webhook: %s", WEBHOOK_URL)
    await bot.set_webhook(WEBHOOK_URL)

    # –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
    commands = [
        BotCommand(command="/start", description="–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É"),
        BotCommand(command="/help", description="–î–æ–ø–æ–º–æ–≥–∞"),
    ]
    try:
        await bot.set_my_commands(commands)
    except Exception as e:
        logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏: %s", e)
    logger.info("‚úÖ on_startup –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

async def on_shutdown(app: web.Application):
    logger.info("‚ö†Ô∏è on_shutdown: –∑–∞–∫—Ä–∏–≤–∞—é —Å–µ—Å—ñ—é –±–æ—Ç–∞...")
    # –ù–ï –≤–∏–¥–∞–ª—è—î–º–æ webhook —Ç—É—Ç (—â–æ–± Telegram –Ω–µ "–∑–∞–±—É–≤" URL –ø—ñ—Å–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç—É)
    try:
        await bot.session.close()
    except Exception:
        pass
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ.")

# Webhook handler
async def handle(request: web.Request):
    try:
        data = await request.json()
    except Exception as e:
        logger.exception("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ JSON: %s", e)
        return web.Response(status=400, text="Bad Request")

    try:
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logger.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–ø–¥–µ–π—Ç—É: %s", e)

    return web.Response(text="OK")

def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle)
    # –ø—Ä–æ—Å—Ç–∏–π healthcheck
    async def health(request):
        return web.Response(text="OK")
    app.router.add_get("/", health)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    port = int(os.getenv("PORT", "10000"))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
