import logging
import os
import asyncio
import json
from aiohttp import web, ClientSession

from aiogram import Bot, Dispatcher
from aiogram.types import Update, BotCommand
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# —Å–≤–æ—ó –º–æ–¥—É–ª—ñ
from handlers_user import user_router
from handlers_admin import admin_router
from db import init_db, count_products
import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -----------------------
BOT_TOKEN = config.BOT_TOKEN
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")

WEBHOOK_HOST = config.WEBHOOK_HOST
if not WEBHOOK_HOST:
    raise RuntimeError("WEBHOOK_HOST / RENDER_EXTERNAL_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST.rstrip('/')}{WEBHOOK_PATH}"

# Aiogram
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏
dp.include_router(user_router)
dp.include_router(admin_router)

# -----------------------
# startup / shutdown
# -----------------------
async def on_startup(app: web.Application):
    logger.info("üöÄ on_startup: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î...")
    try:
        await init_db()
        logger.info("‚úÖ DB initialized.")
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ init_db(): %s", e)

    # –°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook —ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    try:
        ok = await bot.set_webhook(WEBHOOK_URL)
        logger.info("üåç set_webhook result: %s    url=%s", ok, WEBHOOK_URL)
    except Exception as e:
        logger.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ set_webhook(): %s", e)

    # –í—Å—Ç–∞–Ω–æ–≤–∏–º–æ –∫–æ–º–∞–Ω–¥–∏ (–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
    try:
        commands = [
            BotCommand(command="/start", description="–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É"),
            BotCommand(command="/help", description="–î–æ–ø–æ–º–æ–≥–∞"),
        ]
        await bot.set_my_commands(commands)
    except Exception as e:
        logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—å set_my_commands: %s", e)

async def on_shutdown(app: web.Application):
    logger.info("‚ö†Ô∏è on_shutdown: –∑–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–µ—Å—ñ—é –±–æ—Ç–∞...")
    try:
        await bot.session.close()
    except Exception as e:
        logger.warning("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Å–µ—Å—ñ—ó: %s", e)
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ.")

# -----------------------
# Webhook handler
# -----------------------
async def handle_webhook(request: web.Request):
    try:
        data = await request.json()
    except Exception as e:
        logger.exception("–ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ JSON –∑ webhook: %s", e)
        return web.Response(status=400, text="Bad Request")

    try:
        # –í–∞–ª—ñ–¥—É—î–º–æ –∞–ø–¥–µ–π—Ç —ñ –ø—Ä–æ–∫–∏–¥—É—î–º–æ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        update = Update.model_validate(data)
        # feed_update / feed_webhook_update difference across aiogram versions ‚Äî feed_update –ø—ñ–¥—Ö–æ–¥–∏—Ç—å —Ç—É—Ç
        await dp.feed_update(bot, update)
        logger.debug("‚úÖ Update processed.")
    except Exception as e:
        logger.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–ø–¥–µ–π—Ç—É: %s", e)
    return web.Response(text="OK")

# -----------------------
# Debug endpoints
# -----------------------
async def debug_webhook_info(request: web.Request):
    """–ü–æ–≤–µ—Ä—Ç–∞—î getWebhookInfo –≤—ñ–¥ Telegram (–∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)."""
    token = BOT_TOKEN
    url = f"https://api.telegram.org/bot{token}/getWebhookInfo"
    try:
        async with ClientSession() as sess:
            async with sess.get(url, timeout=10) as r:
                text = await r.text()
                try:
                    data = json.loads(text)
                except Exception:
                    data = {"raw": text}
                return web.json_response(data)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram API: %s", e)
        return web.json_response({"error": str(e)})

async def debug_db_count(request: web.Request):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —É –ë–î."""
    try:
        c = await count_products()
        return web.json_response({"products_count": c})
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ debug_db_count: %s", e)
        return web.json_response({"error": str(e)})

# -----------------------
def create_app():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.router.add_get("/", lambda r: web.Response(text="OK"))
    app.router.add_get("/debug/webhook_info", debug_webhook_info)
    app.router.add_get("/debug/db_count", debug_db_count)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

# -----------------------
if __name__ == "__main__":
    port = int(os.getenv("PORT", "10000"))
    web.run_app(create_app(), host="0.0.0.0", port=port)
