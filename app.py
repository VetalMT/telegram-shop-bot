import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# =======================
# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
# =======================

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥"),
            KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")
        ]
    ],
    resize_keyboard=True
)

confirm_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"),
            KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
        ]
    ],
    resize_keyboard=True
)

# =======================
# –ö–æ–º–∞–Ω–¥–∏
# =======================

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}! –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=main_keyboard
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "–¶–µ –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.",
        reply_markup=main_keyboard
    )

# =======================
# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
# =======================

@dp.message(lambda message: message.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    # –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–≤–æ–¥—É –∫–∞—Ç–∞–ª–æ–≥—É
    await message.answer("–û—Å—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤:", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    # –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–≤–æ–¥—É –∫–æ—Ä–∑–∏–Ω–∏
    await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
async def confirm_order(message: types.Message):
    await message.answer("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_order(message: types.Message):
    await message.answer("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_keyboard)

# =======================
# –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–¥–ª—è –∞–¥–º—ñ–Ω–∞)
# =======================

@dp.message()
async def log_all_messages(message: types.Message):
    if ADMIN_ID:
        await bot.send_message(ADMIN_ID, f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.full_name}: {message.text}")

# =======================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =======================

async def main():
    try:
        logging.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î...")
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
