import os
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

# -------------------
# üîπ –õ–æ–≥—É–≤–∞–Ω–Ω—è
# -------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------
# üîπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------
API_TOKEN = os.getenv("API_TOKEN")

if not API_TOKEN:
    logger.warning("‚ö†Ô∏è API_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞! –ü–µ—Ä–µ–≤—ñ—Ä Render Dashboard ‚Üí Environment Variables")

WEBHOOK_HOST = "https://shop-x54i.onrender.com"   # üîπ –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Render URL
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# -------------------
# üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤
# -------------------
CATEGORIES = {
    "electronics": {
        "title": "üì± –ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞",
        "items": ["–¢–µ–ª–µ—Ñ–æ–Ω", "–ù–æ—É—Ç–±—É–∫", "–ù–∞–≤—É—à–Ω–∏–∫–∏"]
    },
    "clothes": {
        "title": "üëï –û–¥—è–≥",
        "items": ["–§—É—Ç–±–æ–ª–∫–∞", "–ö—É—Ä—Ç–∫–∞", "–ö—Ä–æ—Å—ñ–≤–∫–∏"]
    },
    "food": {
        "title": "üçî –á–∂–∞",
        "items": ["–ë—É—Ä–≥–µ—Ä", "–ü—ñ—Ü–∞", "–•–æ—Ç-–¥–æ–≥"]
    }
}

# -------------------
# üîπ –ö–æ–º–∞–Ω–¥–∏
# -------------------
@dp.message(F.text == "/start")
async def start_cmd(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat["title"], callback_data=f"cat:{key}")]
        for key, cat in CATEGORIES.items()
    ])
    await message.answer("üëã –í—ñ—Ç–∞—é —É –º–∞–≥–∞–∑–∏–Ω—ñ!\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)

# -------------------
# üîπ –û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
# -------------------
@dp.callback_query(F.data.startswith("cat:"))
async def category_handler(callback: CallbackQuery):
    cat_key = callback.data.split(":")[1]
    category = CATEGORIES.get(cat_key)

    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=item, callback_data=f"item:{cat_key}:{item}")]
            for item in category["items"]
        ]
    )
    await callback.message.edit_text(f"üì¶ {category['title']}:\n–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=kb)

# -------------------
# üîπ –û–±—Ä–æ–±–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤
# -------------------
@dp.callback_query(F.data.startswith("item:"))
async def item_handler(callback: CallbackQuery):
    _, cat_key, item = callback.data.split(":")
    await callback.message.edit_text(
        f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏: <b>{item}</b>\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {CATEGORIES[cat_key]['title']}\n"
        f"üí∞ –¶—ñ–Ω–∞: 100‚Ç¥ (—Ç–µ—Å—Ç–æ–≤–∞)"
    )

# -------------------
# üîπ Webhook —Å–µ—Ä–≤–µ—Ä
# -------------------
async def on_startup(app: web.Application):
    if not API_TOKEN:
        raise RuntimeError("‚ùå API_TOKEN –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –î–æ–¥–∞–π —É Render ‚Üí Environment Variables!")

    # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –≤–µ–±—Ö—É–∫
    await bot.delete_webhook()
    # –°—Ç–∞–≤–∏–º–æ –Ω–æ–≤–∏–π
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    await bot.session.close()

def setup_app():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, dp.webhook_handler())
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

# -------------------
# üîπ –ó–∞–ø—É—Å–∫
# -------------------
if __name__ == "__main__":
    web.run_app(setup_app(), host="0.0.0.0", port=int(os.getenv("PORT", 8080)))