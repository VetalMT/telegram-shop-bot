import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import asyncpg
from contextlib import asynccontextmanager

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: https://shop-x54i.onrender.com
DATABASE_URL = os.getenv("DATABASE_URL")  # PostgreSQL connection string

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db_pool = None

# --- FSM —Å—Ç–∞–Ω–∏ ---
from aiogram.fsm.state import StatesGroup, State

class Form(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_confirmation = State()

# --- FastAPI lifespan ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    global db_pool
    # Startup
    db_pool = await asyncpg.create_pool(DATABASE_URL)
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook/{BOT_TOKEN}")
    yield
    # Shutdown
    await bot.delete_webhook()
    if db_pool:
        await db_pool.close()

app = FastAPI(lifespan=lifespan)

# --- Telegram keyboard ---
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üé´ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫")],
        [KeyboardButton(text="‚Ñπ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")]
    ],
    resize_keyboard=True
)

# --- Telegram handlers ---
@dp.message(commands=["start"])
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF-–∫–≤–∏—Ç–∫—ñ–≤.", reply_markup=main_keyboard)

@dp.message(lambda message: message.text == "üé´ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫")
async def create_ticket(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø–∞—Å–∞–∂–∏—Ä–∞:")
    await state.set_state(Form.waiting_for_name)

@dp.message(Form.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É:")
    await state.set_state(Form.waiting_for_address)

@dp.message(Form.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data()
    await message.answer(f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥–∞–Ω—ñ:\n–Ü–º'—è: {data['name']}\n–ê–¥—Ä–µ—Å–∞: {data['address']}",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[[KeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")]],
                             resize_keyboard=True
                         ))
    await state.set_state(Form.waiting_for_confirmation)

@dp.message(Form.waiting_for_confirmation)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        data = await state.get_data()
        # –¢—É—Ç –≤—Å—Ç–∞–≤–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é PDF —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±–∞–∑—É
        await message.answer(f"–ö–≤–∏—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è {data['name']}!", reply_markup=main_keyboard)
    await state.clear()

@dp.message(lambda message: message.text == "‚Ñπ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
async def info(message: types.Message):
    await message.answer("–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF-–∫–≤–∏—Ç–∫—ñ–≤ —á–µ—Ä–µ–∑ Telegram.")

# --- Webhook endpoint –¥–ª—è Render ---
@app.post(f"/webhook/{BOT_TOKEN}")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(update)
    return JSONResponse(content={"ok": True})

# --- FastAPI –∫–æ—Ä—ñ–Ω—å (–º–æ–∂–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏) ---
@app.get("/")
async def root():
    return {"status": "bot is running"}

# --- –ó–∞–ø—É—Å–∫ uvicorn —Ç—ñ–ª—å–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ ---
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
