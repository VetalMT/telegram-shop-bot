import os
import logging
from aiohttp import web

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage

# —ñ–º–ø–æ—Ä—Ç–∏ –∑ —Ç–≤–æ—ó—Ö —Ñ–∞–π–ª—ñ–≤ —É –∫–æ—Ä–µ–Ω—ñ
from handlers_admin import admin_router
from handlers_shop import shop_router
from handlers_user import user_router
from db import init_db
import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = config.BOT_TOKEN
if not BOT_TOKEN:
    raise RuntimeError("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ BOT_TOKEN –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")

WEBHOOK_HOST = config.WEBHOOK_HOST
if not WEBHOOK_HOST:
    raise RuntimeError("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ WEBHOOK_HOST –∞–±–æ RENDER_EXTERNAL_URL —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST.rstrip('/')}{WEBHOOK_PATH}"

# Aiogram objects
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –†–æ—É—Ç–µ—Ä–∏
dp.include_router(admin_router)
dp.include_router(shop_router)
dp.include_router(user_router)


async def handle_webhook(request: web.Request):
    """–ü—Ä–∏–π–º–∞—î–º–æ update –≤—ñ–¥ Telegram (JSON) —ñ –ø–µ—Ä–µ–¥–∞—î–º–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É."""
    try:
        update = await request.json()
    except Exception as e:
        logger.exception("Failed to parse request JSON: %s", e)
        return web.Response(status=400, text="Bad Request")
    await dp.feed_webhook_update(bot=bot, update=update)
    return web.Response(text="OK")


async def on_startup(app: web.Application):
    logger.info("üöÄ Startup: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é –ë–î...")
    await init_db()
    logger.info("üåç –í—Å—Ç–∞–Ω–æ–≤–ª—é—é webhook: %s", WEBHOOK_URL)
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


async def on_shutdown(app: web.Application):
    logger.info("‚ö†Ô∏è Shutdown: –≤–∏–¥–∞–ª—è—é webhook —ñ –∑–∞–∫—Ä–∏–≤–∞—é —Å–µ—Å—ñ—é...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ webhook: %s", e)
    try:
        await bot.session.close()
    except Exception:
        pass
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ.")


def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)

    async def health(request: web.Request):
        return web.Response(text="OK")
    app.router.add_get("/", health)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    port = int(os.getenv("PORT", "8080"))
    web.run_app(app, host="0.0.0.0", port=port)


if __name__ == "__main__":
    main()
