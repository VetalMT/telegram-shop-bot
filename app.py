import asyncio
import logging
import os
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from dotenv import load_dotenv

# =======================
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# =======================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
DB_HOST = os.getenv("DB_HOST")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")

# =======================
# –õ–æ–≥—É–≤–∞–Ω–Ω—è
# =======================
logging.basicConfig(level=logging.INFO)

# =======================
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
# =======================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# =======================
# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
# =======================
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")]
    ],
    resize_keyboard=True
)

confirm_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏"), KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ],
    resize_keyboard=True
)

# =======================
# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
# =======================
async def create_db_pool():
    return await asyncpg.create_pool(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME
    )

# =======================
# –ö–æ–º–∞–Ω–¥–∏
# =======================
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}! –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=main_keyboard
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "–¶–µ –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.",
        reply_markup=main_keyboard
    )

# =======================
# –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –ë–î
# =======================
async def get_products(pool):
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT id, name, price FROM products")
        return rows

async def add_to_cart(pool, user_id, product_id):
    async with pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO cart(user_id, product_id) VALUES($1, $2)", user_id, product_id
        )

async def get_cart(pool, user_id):
    async with pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT p.name, p.price FROM cart c JOIN products p ON c.product_id = p.id WHERE c.user_id = $1",
            user_id
        )
        return rows

async def clear_cart(pool, user_id):
    async with pool.acquire() as conn:
        await conn.execute("DELETE FROM cart WHERE user_id = $1", user_id)

# =======================
# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
# =======================
@dp.message(lambda message: message.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: types.Message):
    pool = await create_db_pool()
    products = await get_products(pool)
    if not products:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_keyboard)
        return
    text = "–ù–∞—à—ñ —Ç–æ–≤–∞—Ä–∏:\n\n"
    for prod in products:
        text += f"{prod['id']}. {prod['name']} ‚Äî {prod['price']}‚Ç¥\n"
    text += "\n–©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –∫–æ—Ä–∑–∏–Ω—É, –Ω–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ ID."
    await message.answer(text, reply_markup=main_keyboard)
    await pool.close()

@dp.message(lambda message: message.text.isdigit())
async def add_product_by_id(message: types.Message):
    product_id = int(message.text)
    pool = await create_db_pool()
    await add_to_cart(pool, message.from_user.id, product_id)
    await message.answer("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ —É –∫–æ—Ä–∑–∏–Ω—É ‚úÖ", reply_markup=main_keyboard)
    await pool.close()

@dp.message(lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart_cmd(message: types.Message):
    pool = await create_db_pool()
    items = await get_cart(pool, message.from_user.id)
    if not items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è.", reply_markup=main_keyboard)
    else:
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total = 0
        for item in items:
            text += f"{item['name']} ‚Äî {item['price']}‚Ç¥\n"
            total += item['price']
        text += f"\n–†–∞–∑–æ–º: {total}‚Ç¥"
        await message.answer(text, reply_markup=confirm_keyboard)
    await pool.close()

@dp.message(lambda message: message.text == "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
async def confirm_order(message: types.Message):
    pool = await create_db_pool()
    await clear_cart(pool, message.from_user.id)
    await message.answer("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! ‚úÖ", reply_markup=main_keyboard)
    await pool.close()

@dp.message(lambda message: message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
async def cancel_order(message: types.Message):
    pool = await create_db_pool()
    await clear_cart(pool, message.from_user.id)
    await message.answer("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ ‚ùå", reply_markup=main_keyboard)
    await pool.close()

# =======================
# –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∞–¥–º—ñ–Ω–∞
# =======================
@dp.message()
async def log_all_messages(message: types.Message):
    if ADMIN_ID:
        await bot.send_message(ADMIN_ID, f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.full_name}: {message.text}")

# =======================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =======================
async def main():
    logging.info("–ë–æ—Ç —Å—Ç–∞—Ä—Ç—É—î...")
    await dp.start_polling(bot)
    await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
